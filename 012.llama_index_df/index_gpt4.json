{"index_struct_id": "5b3f5285-fb36-4749-be3a-90cd3156eb6e", "docstore": {"docs": {"5b3f5285-fb36-4749-be3a-90cd3156eb6e": {"text": null, "doc_id": "5b3f5285-fb36-4749-be3a-90cd3156eb6e", "embedding": null, "doc_hash": "08a14830cef184731c6b6a0bdd67fa351d923556941aa99027b276bd839a07a4", "extra_info": null, "all_nodes": {"0": {"text": "Lux AI Season 2 Kits\nThis folder contains all kits for the Lux AI Challenge Season 2. It covers the Kit Structure, Forward Simulation, Envionment Actions and Observations, as well as the general Kit API. For those interested in the RL starter kits/baselines, we highly recommend reading those respective docs as they don't use the standard Kit API. For those who need to know what python packages are available on the competition server, see this\n\nIn each starter kit folder we give you all the tools necessary to compete. Make sure to read the README document carefully. For debugging, you may log to standard error e.g. console.error(\"hello\") or print(\"hello\", file=sys.stderr), and will be recorded by the competition servers.\n\nTo run a episode with verbosity level 2 (higher is more verbose), seed 42, and save a replay to replay.json:\n\nluxai-s2 kits/python/main.py kits/python/main.py -s 42 -v 2 -o replay.json\nTo then watch the replay, upload replay.json to http://s2vis.lux-ai.org/\n\nAlternatively you can generate a openable HTML file to watch it as well by specifying the output as .html\n\nluxai-s2 kits/python/main.py kits/python/main.py -s 42 -v 2 -o replay.html\nFor an in-depth tutorial detailing how to start writing an agent, there is a online Jupyter Notebook", "doc_id": "89a10360-e957-454b-a2c2-df7545e8b048", "embedding": null, "doc_hash": "985b828218b5f239d674b3112c11a8871f807a1bfdc065e49f52009e289018be", "extra_info": null, "index": 0, "child_indices": [], "ref_doc_id": "18a39570-cfda-4acd-8ba3-1c5877dcfed0", "node_info": null, "image": null}, "1": {"text": "detailing how to start writing an agent, there is a online Jupyter Notebook that you can follow (only in python). We highly recommend at least skimming over this as season 2 has some specific quirks that make it different than your standard AI gym environments. Specifically they affect the environment actions mostly.\n\nKit Structure\nEach agent is a folder of files with a main.py file and a language dependent agent.py/agent.js/agent... file. You can generally ignore main.py and focus on the agent file which is where you write your logic. For the rest of this document we will use a python based syntax and assume you are working with the python kit but the instructions apply to all kits.\n\nIn the agent.py file, we define a simple class that holds your agent, you can modify as you wish but be aware of the two functions given. By default, the kit calls the early_setup function for when the agent is bidding and placing down all its factories. It then calls the act function for the rest of the game. These functions have parameters step equal to the environment time step, obs equal to the actual observations, and remainingOverageTime representing how much extra time you have left before having to make a decision.\n\nThese two functions are where you define your agent's logic for both the early phase and the actual game phase of Lux AI season 2. In all kits, example code has been provided to show how to read the observation and return an action to submit to the environment.\n\nForward Simulation\nFor certain", "doc_id": "f951df06-75cd-40ab-8a31-1126874b1a93", "embedding": null, "doc_hash": "76355200dfdde41b349a3b32bbca7ee95f6478f4d0fbceda3f64fbdeb1cd92e2", "extra_info": null, "index": 1, "child_indices": [], "ref_doc_id": "18a39570-cfda-4acd-8ba3-1c5877dcfed0", "node_info": null, "image": null}, "2": {"text": "and return an action to submit to the environment.\n\nForward Simulation\nFor certain strategies it helps to know where units are and what the lichen is like after a few steps.\n\nFor the JS kit, forward simulation is possible by setting the FORWARD_SIM value in main.py. For the python kit you can simply use the lux.forward_sim tool in the lux kit folder. In all kits that have forward simulation enabled they will return a list of observations representing the current and next few observations.\n\nEnvironment Actions\nIn each episode there are two competing teams, both of which control factories and units.\n\nIn the early phase, the action space is different than the normal game phase. See the starter kit codes (agent.py file) for how they are different.\n\nDuring the normal game phase, factories have 3 possible actions, build_light, build_heavy, and water. Units/Robots (light or heavy robots) have 5 possible actions: move, dig, transfer, pickup, self_destruct, recharge; where move, dig, self_destruct have power costs\n\nIn Lux AI Season 2, the robots's actual action space is a list of actions representing it's action queue and your agent will set this action queue to control robots. This action queue max size is env_cfg.UNIT_ACTION_QUEUE_SIZE. Each turn, the unit executes the action at the front of the queue, and repeatedly executes this a user-specified n times. Moreover, action execution counts towards n only when it is", "doc_id": "2d69f684-cdd5-45c9-b49e-fb178b1a032f", "embedding": null, "doc_hash": "afb479b9c0b2f6fa967f3e20e54d014acf4f75318447498a06d48af1e98f91cb", "extra_info": null, "index": 2, "child_indices": [], "ref_doc_id": "18a39570-cfda-4acd-8ba3-1c5877dcfed0", "node_info": null, "image": null}, "3": {"text": "n times. Moreover, action execution counts towards n only when it is succesful, so if your robot runs out of power or a resource to transfer, it won't be counted towards n. Finally, each action can specify a repeat value. If repeat == 0 then after n executions the action is removed. If repeat > 0, then the action is recycled to the back of the queue and sets n = repeat insead of removing the action.\n\nIn code, actions can be given to units as so\n\nactions[unit_id] = [action_0, action_1, ...]\nImportantly, whenever you submit a new action queue, the unit incurs an additional power cost to update the queue of env_cfg.ROBOTS[<robot_type>].ACTION_QUEUE_POWER_COST power. While you can still compete by submitting a action queue with a single action to every unit (like most environments and Lux AI Season 1), this is power inefficient and would be disadvantageous. Lights consume 1 power and Heavies consume 10 power to update their action queue,\n\nSee the example code in the corresponding agent.py file for how to give actions, how to set their n and repeat values to control execution count and recycling, and the various utility functions to validate if an action is possible or not (e.g. does the unit have enough power to perform an action). For those interested in how the exact action_i vector is encoded, see this section on our advanced specs", "doc_id": "5db22dbf-7634-47cf-9cbe-42d3cbdd08f1", "embedding": null, "doc_hash": "cdb5486301f90c20c127e966a7b2fe5189dab507b5b4f733d6ad1f426d562649", "extra_info": null, "index": 3, "child_indices": [], "ref_doc_id": "18a39570-cfda-4acd-8ba3-1c5877dcfed0", "node_info": null, "image": null}, "4": {"text": "the exact action_i vector is encoded, see this section on our advanced specs document.\n\nEnvironment Observations\nFirst, the environment configuration being run is given to your agent. It will be stored under self.env_cfg, see the code for details on how to access for different languages.\n\nThe general observation given to your bot in the kits will look like below. Array(n, m) indicates an array with n rows and m columns. [player_id]: {...} indicates that {...} data can be under any player_id key, and the same logic follows for [unit_id]: {...}. Note that the gym interface returns just the \"obs\" key as the observation. For a concrete version of the env configurations and observations with numbers, see sample_obs.json and sample_env_cfg.json in this folder.\n\n{\n  \"obs\": {\n    \"units\": {\n      [player_id]: {\n        [unit_id]: {\n          \"team_id\": int,\n          \"unit_id\": str,\n          \"power\": int,\n          \"unit_type\": \"LIGHT\" or \"HEAVY\",\n          \"pos\": Array(2),\n          \"cargo\": { \"ice\": int,", "doc_id": "9b329480-cacc-46be-ab9b-686b6727efb1", "embedding": null, "doc_hash": "c53a8f07387956a3143f4855a053e93faaea4c5555a46dc2b404144cc6630c66", "extra_info": null, "index": 4, "child_indices": [], "ref_doc_id": "18a39570-cfda-4acd-8ba3-1c5877dcfed0", "node_info": null, "image": null}, "5": {"text": "         \"cargo\": { \"ice\": int, \"ore\": int, \"water\": int, \"metal\": int },\n          \"action_queue\": Array(N, 6)\n        }\n      }\n    },\n    \"factories\": {\n      [player_id]: {\n        [unit_id]: {\n          \"team_id\": int,\n          \"unit_id\": str,\n          \"power\": int,\n          \"pos\": Array(2),\n          \"cargo\": { \"ice\": int, \"ore\": int, \"water\": int, \"metal\": int },\n          \"strain_id\": int,\n        }\n      }\n    },\n    \"board\": {\n      \"rubble\": Array(48, 48),\n      \"ice\": Array(48, 48),\n      \"ore\": Array(48, 48),\n      \"lichen\": Array(48, 48),\n      \"lichen_strains\": Array(48, 48),\n      \"valid_spawns_mask\": Array(48,", "doc_id": "7344967e-4bfc-4170-8fb0-ee78c29637e0", "embedding": null, "doc_hash": "50548979086d4df28d0c709d170c5e58935abc4fbf702aa3c40fc2717591bbd4", "extra_info": null, "index": 5, "child_indices": [], "ref_doc_id": "18a39570-cfda-4acd-8ba3-1c5877dcfed0", "node_info": null, "image": null}, "6": {"text": "48),\n      \"valid_spawns_mask\": Array(48, 48),\n      \"factories_per_team\": int\n    },\n    \"teams\": {\n      [player_id]: {\n        \"team_id\": int,\n        \"faction\": str,\n        \"water\": int,\n        \"metal\": int,\n        \"factories_to_place\": int,\n        \"factory_strains\": Array<int>,\n        \"place_first\": bool,\n        \"bid\": int\n      }\n    },\n    \"real_env_steps\": int, # note this can be negative due to there being two phases of gameplay\n    \"global_id\": int # only used for reconstructing a LuxAI_S2 State object\n  },\n  \"step\": int,\n  \"remainingOverageTime\": int, # total amount of time your bot can use whenever it exceeds 2s in a turn\n  \"player\": str # your player id\n}\nEvery kit has an Agent class that defines two functions, early_setup and act with parameters step, obs and remainingOverageTime corresponding to the values in the definition above. Note that for the act function, obs[\"real_env_steps\"]", "doc_id": "657b499e-8407-4c16-9c2e-4b69b5c41fb0", "embedding": null, "doc_hash": "549ff05f1ffd295e968d555b5237eee29e305f48b9c102804aa6775ff4631332", "extra_info": null, "index": 6, "child_indices": [], "ref_doc_id": "18a39570-cfda-4acd-8ba3-1c5877dcfed0", "node_info": null, "image": null}, "7": {"text": "in the definition above. Note that for the act function, obs[\"real_env_steps\"] is used instead. This subtracts the time spent bidding and placing factories in early_setup and so the first call to act will be with step = 0 and act will be called max_episode_length times (default 1000).\n\nKit API\nAll kits come with a interactable API to get data about the current state/observation of the environment. For specific details of how to use it you should refer to the code/docs in the respective kit folders. The game state or formatted observation looks as so\n\nclass GameState:\n    env_steps: int # number of env steps passed\n    env_cfg: dict # current env configuration\n    board: Board # the game board\n    units: Dict[str, Dict[str, Unit]] # maps agent ID (player_0, player_1) to a dictionary mapping unit ID to unit objects\n    factories: Dict[str, Dict[str, Factory]] # maps agent ID (player_0, player_1) to a dictionary mapping unit ID to factory objects\n    teams: Dict[str, Team] # maps agent ID (player_0, player_1) to a Team object\nThe board object looks as so\n\nclass Board:\n    rubble: Array\n    ice: Array\n    ore: Array\n    lichen: Array\n    lichen_strains: Array # the", "doc_id": "7093870e-5240-4d3b-8f71-445dd797514c", "embedding": null, "doc_hash": "753c31f2942020697de7b41f92518d62551cbe23c8877f7b14af7a0a707dd564", "extra_info": null, "index": 7, "child_indices": [], "ref_doc_id": "18a39570-cfda-4acd-8ba3-1c5877dcfed0", "node_info": null, "image": null}, "8": {"text": "   lichen: Array\n    lichen_strains: Array # the id of the lichen planted at each tile, corresponds with factory.strain_id\n    factory_occupancy_map: Array # -1 everywhere. Otherwise has the numerical ID of the factory (equivalent to factory.strain_id) that occupies that tile\n    factories_per_team: int # number of factories each team gets to place initially\n    valid_spawns_mask: Array # A mask array of the map with 1s where you can spawn a factory and 0s where you can't\nEach Unit object comes with functions to generate the action vector for actions like move and dig, as well as cost functions that return the power cost to perform some actions.\n\nEach Factory object comes with functions to generate actions as well as compute the cost of building robots and watering lichen.\n\nFinally, the Team object holds the initial pool of water and metal the team has during the early phase, the number of factories left to place, and the strain ids of the owned factories.", "doc_id": "4a76167f-6ccf-473f-8bec-a0e4fa130296", "embedding": null, "doc_hash": "3e9fea8f6bb0685d7f35f528d9d0f3297acad026ed405bf4814010dba0a0e8ff", "extra_info": null, "index": 8, "child_indices": [], "ref_doc_id": "18a39570-cfda-4acd-8ba3-1c5877dcfed0", "node_info": null, "image": null}, "9": {"text": "# %% [markdown]\n# # Lux AI Season 2 Tutorial - Python Kit\n# \n# Welcome to Lux AI Season 2!\n# \n# This notebook is the basic setup to use Jupyter Notebooks and the kaggle-environments package to develop your bot. If you plan to not use Jupyter Notebooks or any other programming language, please see our Github. The following are some important links!\n# \n# Competition Page: https://www.kaggle.com/c/lux-ai-season-2/\n# \n# Online Visualizer: https://s2vis.lux-ai.org/\n# \n# Specifications: https://www.lux-ai.org/specs-s2\n# \n# Github: https://github.com/Lux-AI-Challenge/Lux-Design-S2\n# \n# Bot API: https://github.com/Lux-AI-Challenge/Lux-Design-S2/tree/main/kits\n# \n# And if you haven't done so already, we highly recommend you join our Discord server at https://discord.gg/aWJt3UAcgn or at the minimum follow the kaggle forums at https://www.kaggle.com/c/lux-ai-season-2/discussion. We post important announcements there such as changes to rules, events, and opportunities from our sponsors!\n# \n# Now let's get started!\n\n# %% [markdown]\n# ## Prerequisites\n# We assume that you have", "doc_id": "0260e8c6-1286-4586-afdd-2776139f85ec", "embedding": null, "doc_hash": "c01d71999c73dbd30e16dab7c66932dc3792f313d57e4ede308e2219e449ec22", "extra_info": null, "index": 9, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "10": {"text": "%% [markdown]\n# ## Prerequisites\n# We assume that you have a basic knowledge of Python and programming. It's okay if you don't know the game specifications yet! Feel free to always refer back to https://www.lux-ai.org/specs-s2.\n# \n# Python\u3084\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u790e\u77e5\u8b58\u304c\u3042\u308b\u65b9\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u30b2\u30fc\u30e0\u306e\u4ed5\u69d8\u304c\u307e\u3060\u308f\u304b\u3089\u306a\u304f\u3066\u3082\u5927\u4e08\u592b\uff01\uff1f\n# \u9060\u616e\u306a\u304f\u3044\u3064\u3067\u3082 https://www.lux-ai.org/specs-s2 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n# \n# \n# ## Basic Setup\n# First thing to verify is that you have python 3.7 or above and have the [luxai_s2](https://pypi.org/project/luxai_s2/) package installed. Run the command below to do so. If you are using Kaggle Notebooks, **make sure to also click run-> restart and clear cell outputs** on the top right next to view and add-ons. (This fixes a bug where Kaggle Notebooks loads an incompatible package)\n# \n#", "doc_id": "1f3657cc-7c33-49cf-a524-7adc77681dc8", "embedding": null, "doc_hash": "1137f648da355130d9bd9b919085a804ea69d7d768d85fd35d82eb4dc2f9e740", "extra_info": null, "index": 10, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "11": {"text": "fixes a bug where Kaggle Notebooks loads an incompatible package)\n# \n# \u307e\u305a\u78ba\u8a8d\u3059\u308b\u3053\u3068\u306f\u3001python3.7\u4ee5\u4e0a\u3067\u3042\u308a\u3001[luxai_s2](https://pypi.org/project/luxai_s2/)\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n# \u305d\u306e\u305f\u3081\u306b\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002Kaggle Notebooks\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001**\u53f3\u4e0a\u306eview and add-ons\u306e\u96a3\u306b\u3042\u308brun-> restart and clear cell outputs**\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3053\u3068\u3082\u5fd8\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002(\u3053\u308c\u306f\u3001Kaggle Notebooks\u304c\u4e92\u63db\u6027\u306e\u306a\u3044\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u8aad\u307f\u8fbc\u3080\u30d0\u30b0\u3092\u4fee\u6b63\u3057\u305f\u3082\u306e\u3067\u3059)\n\n# %%\n# verify version\n!python --version\n!pip install --upgrade luxai_s2\n!pip install gym==0.19\n!cp -r ../input/lux-ai-season-2/* .\n\n\n# %%\n%%writefile /opt/conda/lib/python3.7/site-packages/luxai_s2/version.py\n__version__ = \"\"\n\n# this code above is used for Kaggle Notebooks\n# You might not need to", "doc_id": "7d3becd0-05d0-4e02-ae61-cd41c9a9d645", "embedding": null, "doc_hash": "c6322049770a0cd724565592d545a6d0915d9e7cd630e9d4ffafc8b7c353a92a", "extra_info": null, "index": 11, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "12": {"text": "this code above is used for Kaggle Notebooks\n# You might not need to run this but if you get an attribute error about the gym package, run it\n\n# \u3053\u306e\u4e0a\u306e\u30b3\u30fc\u30c9\u306fKaggle Notebooks\u306b\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n# \u5b9f\u884c\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u3082\u3057\u30b8\u30e0\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u95a2\u3059\u308b\u5c5e\u6027\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u3089\u3001\u5b9f\u884c\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\n\n# %%\nimport gym\n\n# %% [markdown]\n# Once the above is installed, make sure to restart and clear cell outputs otherwise the code below won't run. Once that is done we can get started!\n# \n# \u4e0a\u8a18\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3089\u3001\u5fc5\u305a\u518d\u8d77\u52d5\u3057\u3001\u30bb\u30eb\u51fa\u529b\u3092\u30af\u30ea\u30a2\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u305d\u3046\u3057\u306a\u3044\u3068\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u304c\u5b9f\u884c\u3055\u308c\u307e\u305b\u3093\u3002\u3053\u308c\u304c\u5b8c\u4e86\u3057\u305f\u3089\u3001\u3055\u3063\u305d\u304f\u59cb\u3081\u307e\u3057\u3087\u3046\n\n# %%\nfrom luxai_s2.env import LuxAI_S2\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n# %% [markdown]\n# We can now create an environment and start interacting with it, as well as look at what the observation is like\n\n#", "doc_id": "7fa2dda6-5d85-4c74-a5d2-5dea06e97506", "embedding": null, "doc_hash": "04a58acf3d2fda78cd940b9a625a1f1c111e729453d798b7661b8dfd34c18ff8", "extra_info": null, "index": 12, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "13": {"text": "interacting with it, as well as look at what the observation is like\n\n# %%\nenv = LuxAI_S2() # create the environment object\nobs = env.reset(seed=41) # resets an environment with a seed\n\n\n# %%\n# the observation is always composed of observations for both players.\nobs.keys(), obs[\"player_0\"].keys()\n\n\n# %% [markdown]\n# To visualize the environment, on jupyter notebooks you have two options\n# \n# With the `rgb_array` mode you can visualize every step as an environment episode progresses. \n# \n# With the CLI tool, you can run an episode and save a replay.json to upload to https://s2vis.lux-ai.org/ or a replay.html file to directly open and watch\n# \n# \n# \u74b0\u5883\u3092\u53ef\u8996\u5316\u3059\u308b\u305f\u3081\u306b\u3001jupyter notebooks\u3067\u306f\u4ee5\u4e0b\u306e2\u3064\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002\n# rgb_array\u30e2\u30fc\u30c9\u3067\u306f\u3001\u74b0\u5883\u30a8\u30d4\u30bd\u30fc\u30c9\u306e\u9032\u884c\u306b\u5408\u308f\u305b\u3066\u3001\u3059\u3079\u3066\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u8996\u899a\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n# \n# CLI\u30c4\u30fc\u30eb\u3092\u4f7f\u3063\u3066\u30a8\u30d4\u30bd\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3001https://s2vis.lux-ai.org/", "doc_id": "8efa9db3-dd70-40f0-bf1a-54cff953269a", "embedding": null, "doc_hash": "dc530d26f909647fa32751a594f8abf4df6a91afabd91a446851f84a110ffcbd", "extra_info": null, "index": 13, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "14": {"text": "\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u305f\u3081\u306e replay.json \u3092\u4fdd\u5b58\u3057\u305f\u308a\u3001\u76f4\u63a5\u958b\u3044\u3066\u8996\u8074\u3059\u308b\u305f\u3081\u306e replay.html \u30d5\u30a1\u30a4\u30eb\u3092\u4fdd\u5b58\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n# \n# \n\n# %%\n# visualize the environment so far with rgb_array to get a quick look at the map\n# dark orange - high rubble, light orange - low rubble\n# blue = ice, yellow = ore\n\n# rgb_array\u3067\u3053\u308c\u307e\u3067\u306e\u74b0\u5883\u3092\u53ef\u8996\u5316\u3057\u3001\u30de\u30c3\u30d7\u3092\u3056\u3063\u304f\u308a\u3068\u628a\u63e1\u3059\u308b\u3002\n# \u30c0\u30fc\u30af\u30aa\u30ec\u30f3\u30b8\uff1a\u74e6\u792b\u306e\u591a\u3044\u5834\u6240\u3001\u30e9\u30a4\u30c8\u30aa\u30ec\u30f3\u30b8\uff1a\u74e6\u792b\u306e\u5c11\u306a\u3044\u5834\u6240\n# \u9752\uff1d\u6c37\u3001\u9ec4\uff1d\u9271\u77f3\n\nimg = env.render(\"rgb_array\", width=640, height=640)\nplt.imshow(img)\n\n\n# %% [markdown]\n# ## Building an Agent\n# Now we know what the environment looks like, let's try building a working agent. The goal of this environment to ensure at least one factory stays alive by the end of the episode and grow as much lichen as possible.\n# \n# In our kit we provide a skeleton for building an agent. Avoid removing", "doc_id": "fc99904e-9d5e-429f-95e1-b28101ac41a3", "embedding": null, "doc_hash": "f957295c467b3aac5070ac8d01b171ccc22e98e42381f3edf15c347145f330fd", "extra_info": null, "index": 14, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "15": {"text": "\n# In our kit we provide a skeleton for building an agent. Avoid removing any function from the kit unless you know what you are doing as it may cause your agent to fail on the competition servers. This agent defintion should be stored in the `agent.py` file.\n# \n# The agent will have `self.player, self.opp_player, self.env_cfg` populated with the correct values at each step of an environment during competition or when you use the CLI tool to run matches. \n# \n# `self.env_cfg` stores the curent environment's configurations, and `self.player, self.opp_player` stores the name of your player/team and the opposition respectively (will always be \"player_0\" or \"player_1\").\n# \n# \n# \n# \u3055\u3066\u3001\u74b0\u5883\u304c\u3069\u306e\u3088\u3046\u306a\u3082\u306e\u304b\u308f\u304b\u3063\u305f\u3068\u3053\u308d\u3067\u3001\u5b9f\u969b\u306b\u52d5\u304f\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3002\u3053\u306e\u74b0\u5883\u306e\u76ee\u6a19\u306f\u3001\u30a8\u30d4\u30bd\u30fc\u30c9\u7d42\u4e86\u307e\u3067\u306b\u5c11\u306a\u304f\u3068\u30821\u3064\u306e\u5de5\u5834\u304c\u751f\u304d\u6b8b\u308a\u3001\u3067\u304d\u308b\u3060\u3051\u591a\u304f\u306e\u5730\u8863\u985e\u304c\u80b2\u3064\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n# \n#", "doc_id": "f5f0c242-c655-40d0-9193-a6b1d9ee986c", "embedding": null, "doc_hash": "099d4337de8a8745960ac6149dfdcc07aa1711453733e5904d768fb0449ebf15", "extra_info": null, "index": 15, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "16": {"text": "\n# \u79c1\u305f\u3061\u306e\u30ad\u30c3\u30c8\u3067\u306f\u3001\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306e\u30b9\u30b1\u30eb\u30c8\u30f3\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\u7af6\u5408\u30b5\u30fc\u30d0\u3067\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u304c\u5931\u6557\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u3001\u81ea\u5206\u304c\u4f55\u3092\u3057\u3066\u3044\u308b\u304b\u308f\u304b\u3089\u306a\u3044\u9650\u308a\u3001\u30ad\u30c3\u30c8\u304b\u3089\u6a5f\u80fd\u3092\u524a\u9664\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u306e\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306e\u5b9a\u7fa9\u306f\u3001agent.py \u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n# \n# \u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306f\u3001\u7af6\u6280\u4e2d\u306e\u74b0\u5883\u306e\u5404\u30b9\u30c6\u30c3\u30d7\u3067\u3001\u3042\u308b\u3044\u306fCLI\u30c4\u30fc\u30eb\u3092\u4f7f\u3063\u3066\u8a66\u5408\u3092\u5b9f\u884c\u3059\u308b\u3068\u304d\u306b\u3001self.player, self.opp_player, self.env_cfg \u306b\u6b63\u3057\u3044\u5024\u304c\u5165\u529b\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n# \n# self.env_cfg\u306f\u73fe\u5728\u306e\u74b0\u5883\u306e\u8a2d\u5b9a\u3092\u4fdd\u5b58\u3057\u3001self.player,", "doc_id": "b00fdbaf-9f95-4cf5-9667-b68bf4d44468", "embedding": null, "doc_hash": "2e6f852eea3cfcb7913be01811a54170b74e13b875386ec781a7cfc7232dcf75", "extra_info": null, "index": 16, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "17": {"text": "self.opp_player\u306f\u305d\u308c\u305e\u308c\u81ea\u5206\u306e\u30d7\u30ec\u30a4\u30e4\u30fc/\u30c1\u30fc\u30e0\u3068\u5bfe\u6226\u76f8\u624b\u306e\u540d\u524d\u3092\u4fdd\u5b58\u3057\u307e\u3059\uff08\u5e38\u306b\u300cplayer_0\u300d\u307e\u305f\u306f\u300cplayer_1\u300d\u3067\u3059\uff09\u3002\n# \n\n# %%\nfrom lux.kit import obs_to_game_state, GameState, EnvConfig\nfrom luxai_s2.utils import animate\nfrom lux.utils import direction_to, my_turn_to_place_factory\n\nclass Agent():\n    def __init__(self, player: str, env_cfg: EnvConfig) -> None:\n        \n        self.player = player\n        self.opp_player = \"player_1\" if self.player == \"player_0\" else \"player_0\"\n        np.random.seed(0)\n        self.env_cfg: EnvConfig = env_cfg\n\n    def early_setup(self, step: int, obs, remainingOverageTime: int = 60):\n        actions = dict()\n        # optionally convert observations to python objects with utility functions\n        game_state = obs_to_game_state(step, self.env_cfg, obs) \n        return actions\n\n ", "doc_id": "4346f224-22d9-43c9-b16d-aca8ce91fd05", "embedding": null, "doc_hash": "c257fbd054999075ddd49fec57b6dabe4b9d4df59e352fcbd109b1af317404b2", "extra_info": null, "index": 17, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "18": {"text": "self.env_cfg, obs) \n        return actions\n\n    def act(self, step: int, obs, remainingOverageTime: int = 60):\n        actions = dict()\n        game_state = obs_to_game_state(step, self.env_cfg, obs)\n        return actions\n\n# %% [markdown]\n# \u30b3\u30fc\u30c9\u306e\u6982\u8981\uff1a\n# \n# \u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002\n# Agent\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u3053\u306e\u30af\u30e9\u30b9\u306f\u3001\u30d7\u30ec\u30a4\u30e4\u30fc\u3001\u5bfe\u6226\u76f8\u624b\u306e\u30d7\u30ec\u30a4\u30e4\u30fc\u3001\u74b0\u5883\u8a2d\u5b9a\u3092\u521d\u671f\u5316\u3057\u3001\u4e71\u6570\u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n# \n# early_setup\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30b2\u30fc\u30e0\u306e\u65e9\u3044\u6bb5\u968e\u3067\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3092\u884c\u3044\u307e\u3059\u3002\u4e0e\u3048\u3089\u308c\u305f\u89b3\u6e2c\u5024\u3092\u4f7f\u3063\u3066\u3001\u30b2\u30fc\u30e0\u306e\u72b6\u614b\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u73fe\u5728\u306f\u4f55\u3082\u884c\u52d5\u3092\u8fd4\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n# \n#", "doc_id": "983d1836-b4f6-4bf2-93c9-80a4362bd4fb", "embedding": null, "doc_hash": "366ac46574a247f8a81ccf5f4cfd9bfc19ede3fdfa11575f603e8a6c637d13d1", "extra_info": null, "index": 18, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "19": {"text": "\n# act\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u304c\u6b21\u306e\u884c\u52d5\u3092\u6c7a\u5b9a\u3059\u308b\u305f\u3081\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\u4e0e\u3048\u3089\u308c\u305f\u89b3\u6e2c\u5024\u3092\u4f7f\u3063\u3066\u3001\u30b2\u30fc\u30e0\u306e\u72b6\u614b\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u73fe\u5728\u306f\u4f55\u3082\u884c\u52d5\u3092\u8fd4\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n# \n# \u73fe\u6642\u70b9\u3067\u306f\u3001\u3053\u306e\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306f\u5177\u4f53\u7684\u306a\u6226\u7565\u3084\u884c\u52d5\u3092\u6301\u3063\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u30b2\u30fc\u30e0\u72b6\u614b\u306e\u751f\u6210\u3068\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306e\u57fa\u672c\u7684\u306a\u69cb\u9020\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u62e1\u5f35\u3057\u3066\u3001\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u304c\u30b2\u30fc\u30e0\u72b6\u614b\u306b\u57fa\u3065\u3044\u3066\u5177\u4f53\u7684\u306a\u884c\u52d5\u3092\u6c7a\u5b9a\u3059\u308b\u3088\u3046\u306b\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\n\n# %% [markdown]\n# Note that in season 2, there are two distinct phases of the game where you will have to program two different sets of logic to play it.\n# \n# We will also define a simple function to initialize our agent and interact with the environment and generate a simple video", "doc_id": "6325116d-dca2-4de9-be6b-74cdb1dc94f6", "embedding": null, "doc_hash": "6539cce4d73be0b5c3d92a4540c9efe631ccd64e6838397303d6ac665bc93354", "extra_info": null, "index": 19, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "20": {"text": "a simple function to initialize our agent and interact with the environment and generate a simple video replay.\n# No need to worry about how this works specifically, you can copy paste this as you see fit. Note that this is a simplified representation. In order to visually see all numbers and details about units, factories etc. use our web visualizer.\n# \n# \n# \u30b7\u30fc\u30ba\u30f32\u3067\u306f\u30012\u3064\u306e\u7570\u306a\u308b\u30d5\u30a7\u30fc\u30ba\u304c\u3042\u308a\u3001\n# \u305d\u308c\u3092\u30d7\u30ec\u30a4\u3059\u308b\u305f\u3081\u306b2\u3064\u306e\u7570\u306a\u308b\u30ed\u30b8\u30c3\u30af\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n# \n# \u307e\u305f\u3001\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u3092\u521d\u671f\u5316\u3057\u3001\u74b0\u5883\u3068\u5bfe\u8a71\u3057\u3001\u7c21\u5358\u306a\u30d3\u30c7\u30aa\u518d\u751f\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306e\u7c21\u5358\u306a\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n# \u3053\u308c\u304c\u5177\u4f53\u7684\u306b\u3069\u306e\u3088\u3046\u306b\u52d5\u4f5c\u3059\u308b\u304b\u306f\u6c17\u306b\u3059\u308b\u5fc5\u8981\u306f\u306a\u304f\u3001\u9069\u5f53\u306b\u30b3\u30d4\u30fc\u30da\u30fc\u30b9\u30c8\u3059\u308c\u3070\u3088\u3044\u3002\n#", "doc_id": "2e527505-1eae-48aa-ac86-a512f79419bf", "embedding": null, "doc_hash": "fd15b22c16cddaa2bbffc110501eb1b451d805474da6098171e9187b040727fe", "extra_info": null, "index": 20, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "21": {"text": "\u3053\u308c\u306f\u7c21\u7565\u5316\u3055\u308c\u305f\u8868\u73fe\u3067\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3059\u3079\u3066\u306e\u6570\u5024\u3084\u30e6\u30cb\u30c3\u30c8\u3001\u5de5\u5834\u306a\u3069\u306e\u8a73\u7d30\u3092\u8996\u899a\u7684\u306b\u898b\u308b\u306b\u306f\u3001\u30a6\u30a7\u30d6\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30b6\u30fc\u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n# \n\n# %%\n# \u3053\u306e\u30b3\u30fc\u30c9\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u753b\u50cf\u306e\u30ea\u30b9\u30c8\u3092\u4f7f\u3063\u3066WebM\u5f62\u5f0f\u306e\u52d5\u753b\u3092\u4f5c\u6210\u3057\u3001\n# \u305d\u306e\u52d5\u753b\u3092\u8868\u793a\u3059\u308b\u95a2\u6570 animate \u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n# Kaggle\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3067\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u3001OpenCV\uff08cv2\uff09\u3092\u4f7f\u7528\u3057\u3066\u52d5\u753b\u3092\u751f\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n# MoviePy\u306fKaggle\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3067\u306f\u52d5\u4f5c\u3057\u306a\u3044\u305f\u3081\u3001\u4ee3\u308f\u308a\u306bOpenCV\u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n# \u95a2\u6570\u306e\u624b\u9806\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n# \u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\uff08cv2, os, string, random\uff09\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002\n#", "doc_id": "8306012b-07c5-4a90-a49b-56df021d624a", "embedding": null, "doc_hash": "76dc9343c929d15c42466b7b0f43fb382a19026b0fbee0fab81a10d4476a86e5", "extra_info": null, "index": 21, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "22": {"text": "string, random\uff09\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002\n# \u30e9\u30f3\u30c0\u30e0\u306a\u52d5\u753b\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n# \u6700\u521d\u306e\u753b\u50cf\u304b\u3089\u52d5\u753b\u306e\u9ad8\u3055\u3001\u5e45\u3001\u30ec\u30a4\u30e4\u30fc\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n# WebM\u5f62\u5f0f\uff08VP9\u30b3\u30fc\u30c7\u30c3\u30af\uff09\u306e\u52d5\u753b\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001cv2.VideoWriter_fourcc \u3092\u4f7f\u3063\u3066fourcc\u30b3\u30fc\u30c7\u30c3\u30af\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n# cv2.VideoWriter \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u3001\u52d5\u753b\u30d5\u30a1\u30a4\u30eb\u540d\u3001\u30b3\u30fc\u30c7\u30c3\u30af\u3001\u30d5\u30ec\u30fc\u30e0\u30ec\u30fc\u30c8\uff0810fps\uff09\u3001\u30d5\u30ec\u30fc\u30e0\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n# \u753b\u50cf\u30ea\u30b9\u30c8\u3092\u30eb\u30fc\u30d7\u3057\u3001\u5404\u753b\u50cf\u306e\u8272\u7a7a\u9593\u3092BGR\u304b\u3089RGB\u306b\u5909\u63db\u3057\u3001\u52d5\u753b\u306b\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002\n# \u52d5\u753b\u30d5\u30a1\u30a4\u30eb\u3092\u9589\u3058\u3066\u30ea\u30bd\u30fc\u30b9\u3092\u89e3\u653e\u3057\u307e\u3059\u3002\n# _return", "doc_id": "eb17b130-bfc3-4346-817d-f4d5dd6ad4a3", "embedding": null, "doc_hash": "df9136a427e1bb736403b8f8238e7b1d9a14bd93aa5838e5ed36360f461ad26d", "extra_info": null, "index": 22, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "23": {"text": "\u304cTrue\u306e\u5834\u5408\u3001IPython.display.Video\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3001\u751f\u6210\u3055\u308c\u305f\u52d5\u753b\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n# \u3053\u306e\u95a2\u6570\u306f\u3001\u30b2\u30fc\u30e0\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3084\u5b66\u7fd2\u904e\u7a0b\u306a\u3069\u3001\u753b\u50cf\u306e\u9023\u7d9a\u3057\u305f\u30d5\u30ec\u30fc\u30e0\u3092\u30d3\u30c7\u30aa\u3068\u3057\u3066\u8996\u899a\u5316\u3059\u308b\u969b\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002\n\ndef animate(imgs, _return=True):\n    # using cv2 to generate videos as moviepy doesn't work on kaggle notebooks\n    import cv2\n    import os\n    import string\n    import random\n    video_name = ''.join(random.choice(string.ascii_letters) for i in range(18))+'.webm'\n    height, width, layers = imgs[0].shape\n    fourcc = cv2.VideoWriter_fourcc(*'VP90')\n    video = cv2.VideoWriter(video_name, fourcc, 10, (width,height))\n\n    for img in imgs:\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        video.write(img)\n    video.release()\n    if", "doc_id": "862c8934-5615-4673-88f8-31e196960b36", "embedding": null, "doc_hash": "566fb24ba50dfdf1d21f156ee4b7c206676524a60a6c964dda67286e8c421e31", "extra_info": null, "index": 23, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "24": {"text": "   video.release()\n    if _return:\n        from IPython.display import Video\n        return Video(video_name)\n\n    \n# \u3053\u306e\u30b3\u30fc\u30c9\u306f\u3001interact\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n# \u3053\u306e\u95a2\u6570\u306f\u3001\u74b0\u5883\uff08env\uff09\u3068\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\uff08agents\uff09\u3092\u53d7\u3051\u53d6\u308a\u3001\n# \u6307\u5b9a\u3055\u308c\u305f\u30b9\u30c6\u30c3\u30d7\u6570\uff08steps\uff09\u306b\u308f\u305f\u3063\u3066\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u3068\u74b0\u5883\u3068\u306e\u76f8\u4e92\u4f5c\u7528\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\u3057\u307e\u3059\u3002\n# \u3053\u306e\u95a2\u6570\u306f\u3001\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u5404\u30b9\u30c6\u30c3\u30d7\u306e\u753b\u50cf\u30d5\u30ec\u30fc\u30e0\u3092\u4fdd\u5b58\u3057\u3001\n# \u6700\u5f8c\u306banimate\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u30d3\u30c7\u30aa\u3092\u751f\u6210\u30fb\u8868\u793a\u3057\u307e\u3059\u3002\n\n# \u95a2\u6570\u306e\u624b\u9806\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n# \u74b0\u5883\u3092\u30ea\u30bb\u30c3\u30c8\u3057\u3001\u4e71\u6570\u30b7\u30fc\u30c9\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n#", "doc_id": "8cfacae6-4485-4c08-b05e-feacef6677b7", "embedding": null, "doc_hash": "e970aee90a1491879af5a87a267c72a8826bc74fa037b493070b7fd9ca4bf51e", "extra_info": null, "index": 24, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "25": {"text": "\u753b\u50cf\u30d5\u30ec\u30fc\u30e0\u3092\u4fdd\u5b58\u3059\u308b\u305f\u3081\u306e\u7a7a\u306e\u30ea\u30b9\u30c8\uff08imgs\uff09\u3068\u30b9\u30c6\u30c3\u30d7\u30ab\u30a6\u30f3\u30bf\uff08step\uff09\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n# \u74b0\u5883\u306e\u30d5\u30a7\u30fc\u30ba1\u304c\u7d42\u4e86\u3059\u308b\u307e\u3067\u30eb\u30fc\u30d7\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u3053\u306e\u30eb\u30fc\u30d7\u5185\u3067\u306f\u3001\u5404\u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u304cearly_setup\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3057\u3001\u884c\u52d5\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001\u74b0\u5883\u306b\u884c\u52d5\u3092\u9069\u7528\u3057\u3001\u65b0\u3057\u3044\u89b3\u6e2c\u5024\u3001\u5831\u916c\u3001\u5b8c\u4e86\u30d5\u30e9\u30b0\u3001\u8ffd\u52a0\u60c5\u5831\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u5404\u30b9\u30c6\u30c3\u30d7\u306e\u753b\u50cf\u30d5\u30ec\u30fc\u30e0\u3092imgs\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\n#", "doc_id": "0ae868d6-0075-422b-a7b2-f0a6d77a52a4", "embedding": null, "doc_hash": "3be02f3d51221a69e2050d8b31670e5d0f4cf87c52dacf856ff3fe8b02c2505d", "extra_info": null, "index": 25, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "26": {"text": "\u4e21\u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u304c\u30b2\u30fc\u30e0\u3092\u7d42\u4e86\u3059\u308b\u307e\u3067\u30eb\u30fc\u30d7\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u3053\u306e\u30eb\u30fc\u30d7\u5185\u3067\u306f\u3001\u5404\u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u304cact\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3057\u3001\u884c\u52d5\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001\u74b0\u5883\u306b\u884c\u52d5\u3092\u9069\u7528\u3057\u3001\u65b0\u3057\u3044\u89b3\u6e2c\u5024\u3001\u5831\u916c\u3001\u5b8c\u4e86\u30d5\u30e9\u30b0\u3001\u8ffd\u52a0\u60c5\u5831\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u5404\u30b9\u30c6\u30c3\u30d7\u306e\u753b\u50cf\u30d5\u30ec\u30fc\u30e0\u3092imgs\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\n# animate\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u3001imgs\u30ea\u30b9\u30c8\u306b\u683c\u7d0d\u3055\u308c\u305f\u753b\u50cf\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u30d3\u30c7\u30aa\u3092\u751f\u6210\u30fb\u8868\u793a\u3057\u307e\u3059\u3002\n# \u3053\u306e\u95a2\u6570\u306f\u3001\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u3068\u74b0\u5883\u306e\u76f8\u4e92\u4f5c\u7528\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\u3057\u3001\u7d50\u679c\u3092\u8996\u899a\u5316\u3059\u308b\u969b\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002\n\ndef interact(env, agents, steps):\n    # reset our env\n    obs = env.reset(seed=41)\n   ", "doc_id": "1af33d84-7675-4347-8813-84f379b463e1", "embedding": null, "doc_hash": "0f31cc886d999c91d06d1f8bbb4149d73c89d45f104b9054a7a91a2301418975", "extra_info": null, "index": 26, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "27": {"text": "our env\n    obs = env.reset(seed=41)\n    np.random.seed(0)\n    imgs = []\n    step = 0\n    \n    # Note that as the environment has two phases, we also keep track a value called \n    # `real_env_steps` in the environment state. The first phase ends once `real_env_steps` is 0 and used below\n\n    # iterate until phase 1 ends\n    while env.state.real_env_steps < 0:\n        if step >= steps: break\n        actions = {}\n        \n        for player in env.agents:\n            o = obs[player]\n            a = agents[player].early_setup(step, o)\n            actions[player] = a\n            \n        step += 1\n        obs, rewards, dones, infos = env.step(actions)\n        imgs += [env.render(\"rgb_array\", width=640, height=640)]\n    done = False\n    \n    while not done:\n        if step >= steps: break\n    ", "doc_id": "78cda542-822a-4411-950e-6fe261e9c4d2", "embedding": null, "doc_hash": "399977b45ae258768fa5bf6988bd50ce7ff9b25abb6220a556f8fd90b7e530cf", "extra_info": null, "index": 27, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "28": {"text": "       if step >= steps: break\n        actions = {}\n        for player in env.agents:\n            o = obs[player]\n            a = agents[player].act(step, o)\n            actions[player] = a\n        step += 1\n        obs, rewards, dones, infos = env.step(actions)\n        imgs += [env.render(\"rgb_array\", width=640, height=640)]\n        done = dones[\"player_0\"] and dones[\"player_1\"]\n    return animate(imgs)\n\n# %% [markdown]\n# ### Early Phase\n# \n# During the first turn of the game, each player is given the map, starting resources (N factories and N\\*150 water and ore), and are asked to bid for who goes first/second. Each 1 bid removes 1 water and 1 ore from that player's starting resources. Each player responds in turn 1 with their bid, which can be positive to prefer going first or negative to prefer going second. \n# \n# After bidding you then place each of your factories. Each team gets `N` factories to place, with. For conveniency the observation contains all possible spawn locations for your team which account for the", "doc_id": "c41a8ca2-3b10-4867-b239-8da2254db48d", "embedding": null, "doc_hash": "6e2dfee3c72f799ed376e4248e8785ad3bfb75c0b774572773e9ba9bbed0296c", "extra_info": null, "index": 28, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "29": {"text": "the observation contains all possible spawn locations for your team which account for the opponent's factories and resource tiles which you can't spawn on.\n# \n# We will write a simple `early_setup` function to return the appropriate action to handle this phase.\n# \n# \n# \u30b2\u30fc\u30e0\u306e\u6700\u521d\u306e\u30bf\u30fc\u30f3\u306b\u3001\u5404\u30d7\u30ec\u30a4\u30e4\u30fc\u306f\u30de\u30c3\u30d7\u3068\u30b9\u30bf\u30fc\u30c8\u8cc7\u6e90\uff08N\u500b\u306e\u5de5\u5834\u3068N*150\u500b\u306e\u6c34\u3068\u9271\u77f3\uff09\u3092\u4e0e\u3048\u3089\u308c\u3001\u8ab0\u304c1\u4f4d\u304b2\u4f4d\u304b\u3092\u7af6\u3046\u3088\u3046\u306b\u8a00\u308f\u308c\u307e\u3059\u30021\u56de\u5165\u672d\u3059\u308b\u3054\u3068\u306b\u3001\u305d\u306e\u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u30b9\u30bf\u30fc\u30c8\u8cc7\u6e90\u304b\u3089\u6c34\u3068\u9271\u77f3\u304c1\u500b\u305a\u3064\u53d6\u308a\u9664\u304b\u308c\u308b\u3002\u5404\u30d7\u30ec\u30a4\u30e4\u30fc\u306f1\u30bf\u30fc\u30f3\u76ee\u306b\u81ea\u5206\u306e\u5165\u672d\u306b\u5fdc\u3058\u307e\u3059\u304c\u3001\u3053\u306e\u5165\u672d\u306b\u306f\u30011\u4f4d\u3092\u597d\u3080\u30dd\u30b8\u30c6\u30a3\u30d6\u30682\u4f4d\u3092\u597d\u3080\u30cd\u30ac\u30c6\u30a3\u30d6\u304c\u3042\u308a\u307e\u3059\u3002\n# \n#", "doc_id": "f8d8faa2-88d8-4b8e-9b4e-fbed7ec2a9f3", "embedding": null, "doc_hash": "dfb8692a51fa44fabd54c0c27b685a896e1a223ffaf4e9a2b36859aa3a7d0b8f", "extra_info": null, "index": 29, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "30": {"text": "\n# \u5165\u672d\u5f8c\u3001\u5404\u81ea\u306e\u5de5\u5834\u3092\u914d\u7f6e\u3057\u307e\u3059\u3002\u5404\u30c1\u30fc\u30e0\u306fN\u500b\u306e\u5de5\u5834\u3092\u914d\u7f6e\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4fbf\u5b9c\u4e0a\u3001\u89b3\u5bdf\u306b\u306f\u3001\u76f8\u624b\u306e\u5de5\u5834\u3068\u8cc7\u6e90\u30bf\u30a4\u30eb\u3092\u8003\u616e\u3057\u305f\u3001\u81ea\u30c1\u30fc\u30e0\u306e\u53ef\u80fd\u306a\u30b9\u30dd\u30fc\u30f3\u4f4d\u7f6e\u304c\u3059\u3079\u3066\u542b\u307e\u308c\u3066\u3044\u307e\u3059\uff08\u30b9\u30dd\u30fc\u30f3\u3067\u304d\u306a\u3044\u5834\u6240\u306f\u3042\u308a\u307e\u305b\u3093\uff09\u3002\n# \n# \u3053\u306e\u30d5\u30a7\u30fc\u30ba\u3092\u51e6\u7406\u3059\u308b\u305f\u3081\u306b\u3001\u9069\u5207\u306a\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\u5358\u7d14\u306aearly_setup\u95a2\u6570\u3092\u66f8\u304f\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n# \n# \n\n# %%\n# \u3053\u306e\u30b3\u30fc\u30c9\u306f\u3001early_setup\u30e1\u30bd\u30c3\u30c9\u3092\u518d\u5b9a\u7fa9\u3057\u3066\u3001\n# \u30b2\u30fc\u30e0\u306e\u521d\u671f\u6bb5\u968e\u3067\u306e\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306e\u884c\u52d5\u3092\u6c7a\u5b9a\u3059\u308b\u30ed\u30b8\u30c3\u30af\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n#", "doc_id": "85463ee8-dfb1-419e-83f2-ec5e83d364c1", "embedding": null, "doc_hash": "831cdcf33151ef2e2b50d2d0816e26123bb26cb57161031aa1825763fc939296", "extra_info": null, "index": 30, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "31": {"text": "\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u304c\u6240\u5c5e\u3059\u308b\u30c1\u30fc\u30e0\u3068\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u306e\u914d\u7f6e\u306b\u95a2\u3059\u308b\u884c\u52d5\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\n\n# \u30b2\u30fc\u30e0\u306e\u30b9\u30c6\u30c3\u30d7\u304c0\u306e\u5834\u5408\u3001\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306f\u30c1\u30fc\u30e0\u540d\uff08\"AlphaStrike\"\uff09\u3068\u5165\u672d\u984d\uff080\uff09\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n# \u5165\u672d\u306f\u3001\u30b2\u30fc\u30e0\u306e\u521d\u671f\u914d\u7f6e\u3067\u3069\u3061\u3089\u306e\u30c1\u30fc\u30e0\u304c\u5148\u884c\u30fb\u5f8c\u653b\u3059\u308b\u304b\u3092\u6c7a\u5b9a\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\n# \u3053\u3053\u3067\u306f\u3001\u30ea\u30bd\u30fc\u30b9\u3092\u7bc0\u7d04\u3059\u308b\u305f\u3081\u306b0\u3092\u5165\u672d\u3057\u3066\u3044\u307e\u3059\u3002\n\n# \u305d\u308c\u4ee5\u964d\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u306f\u3001\u89b3\u6e2c\u5024\u3092\u4f7f\u3063\u3066\u30b2\u30fc\u30e0\u306e\u72b6\u614b\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n# \u305d\u306e\u5f8c\u3001\u73fe\u5728\u306e\u6c34\u3068\u91d1\u5c5e\u306e\u91cf\u3001\u914d\u7f6e\u3059\u308b\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u306e\u6b8b\u6570\u3001\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u3092\u914d\u7f6e\u3059\u308b\u756a\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n#", "doc_id": "503e1fd4-c188-4b11-a02b-90397de328d8", "embedding": null, "doc_hash": "c42b3936c12d5df3185b31de9622b8c86646afec0b6b4a1449317b385fcd54b7", "extra_info": null, "index": 31, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "32": {"text": "\u307e\u3060\u914d\u7f6e\u3059\u3079\u304d\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u304c\u6b8b\u3063\u3066\u304a\u308a\u3001\u304b\u3064\u914d\u7f6e\u3059\u308b\u756a\u3067\u3042\u308b\u5834\u5408\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u5834\u6240\u306b\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u3092\u914d\u7f6e\u3057\u307e\u3059\u3002\n# \u3053\u306e\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u306f\u3001150\u306e\u91d1\u5c5e\u3068\u6c34\u3092\u6301\u3063\u3066\u30b9\u30dd\u30fc\u30f3\u3057\u307e\u3059\u3002\n\n# \u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8fd4\u3057\u307e\u3059\u3002\n# \u3053\u306e\u518d\u5b9a\u7fa9\u306b\u3088\u308a\u3001\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306f\u30b2\u30fc\u30e0\u306e\u521d\u671f\u6bb5\u968e\u3067\u3001\n# \u30c1\u30fc\u30e0\u540d\u3068\u5165\u672d\u984d\u3092\u8a2d\u5b9a\u3057\u3001\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u3092\u914d\u7f6e\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n# \u3053\u308c\u306f\u3001\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306e\u6226\u7565\u3092\u62e1\u5f35\u3057\u3001\u30b2\u30fc\u30e0\u306e\u521d\u671f\u6bb5\u968e\u3067\u306e\u884c\u52d5\u3092\u6700\u9069\u5316\u3059\u308b\u305f\u3081\u306e\u57fa\u672c\u7684\u306a\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\n\ndef early_setup(self, step: int, obs, remainingOverageTime: int = 60):\n    if step == 0:\n        # bid 0 to not waste resources bidding and declare as the default faction\n        #", "doc_id": "f3237c78-be1e-48da-9608-1231c69da5e6", "embedding": null, "doc_hash": "ff294faeddac2af314e2842f14f42912de249417feb773cba3e6f36361e1113b", "extra_info": null, "index": 32, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "33": {"text": "resources bidding and declare as the default faction\n        # you can bid -n to prefer going second or n to prefer going first in placement\n        return dict(faction=\"AlphaStrike\", bid=0)\n    else:\n        game_state = obs_to_game_state(step, self.env_cfg, obs)\n        # factory placement period\n        \n        # how much water and metal you have in your starting pool to give to new factories\n        water_left = game_state.teams[self.player].water\n        metal_left = game_state.teams[self.player].metal\n        \n        # how many factories you have left to place\n        factories_to_place = game_state.teams[self.player].factories_to_place\n        \n        # whether it is your turn to place a factory\n        my_turn_to_place = my_turn_to_place_factory(game_state.teams[self.player].place_first, step)\n        \n        if factories_to_place > 0 and my_turn_to_place:\n  ", "doc_id": "958e0405-9b3b-4d0b-a970-05671122557c", "embedding": null, "doc_hash": "d9c486739f9a0bfd2073e2256eed7943b6ae6844f2872f4581422f053adb600b", "extra_info": null, "index": 33, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "34": {"text": "factories_to_place > 0 and my_turn_to_place:\n            # we will spawn our factory in a random location with 150 metal and water if it is our turn to place\n            potential_spawns = np.array(list(zip(*np.where(obs[\"board\"][\"valid_spawns_mask\"] == 1))))\n            spawn_loc = potential_spawns[np.random.randint(0, len(potential_spawns))]\n            return dict(spawn=spawn_loc, metal=150, water=150)\n        return dict()\n    \n\nAgent.early_setup = early_setup\n\n# %% [markdown]\n# Each team gets `N` factories to place, with. For conveniency the observation contains all possible spawn locations for your team\n# \n# \u5404\u30c1\u30fc\u30e0\u306f\u3001N\u500b\u306e\u5de5\u5834\u3092\u914d\u7f6e\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4fbf\u5229\u306a\u3088\u3046\u306b\u3001\u89b3\u5bdf\u306b\u306f\u3042\u306a\u305f\u306e\u30c1\u30fc\u30e0\u306e\u3059\u3079\u3066\u306e\u53ef\u80fd\u306a\u30b9\u30dd\u30fc\u30f3\u4f4d\u7f6e\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\n\n# %%\n# recreate our agents and run\nagents = {player: Agent(player, env.state.env_cfg) for player", "doc_id": "4d01aaf3-e68d-4fc5-8557-77b84aa55f21", "embedding": null, "doc_hash": "68d185209b84dc2317bfa468af6137b3cd6fd9e96473a7307fbd8b3d1187f49c", "extra_info": null, "index": 34, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "35": {"text": "= {player: Agent(player, env.state.env_cfg) for player in env.agents}\n\ninteract(env, agents, 5)\n\n# %% [markdown]\n# Congratz, we have lift off! We got both teams to spawn some factories. With the early phase over, we can now start programming the logic to power the next phase.\n# \n# ### Regular Phase\n# \n# The goal of the game is to grow more lichen than your opponent by the end of the 1000 step episode (not including early phase steps). To grow lichen factories must consume water. Moreover, factories passively consume 1 water a turn, and you must ensure at least one factory survives until the end. Whichever team loses all their factories first will automatically lose. \n# \n# To obtain water, robots/units must mine ice from ice tiles (blue on the map) and deliver them back to a factory which then automatically refines ice into water. \n# \n# Moreover, to help us write better code, we will use the provided function `obs_to_game_state` to convert observations from raw dictionaries to interactable python objects. Finally, we will also use a provided `animate` function to easily generate a simple video of the episode and embed it into here without having to upload a replay file to the web visualizer.\n# \n# \n#", "doc_id": "43a82f56-9e3a-4dbd-b37d-70625192f9e9", "embedding": null, "doc_hash": "9de4784a8cfdcbd119b9fef3d1a55ffa8fb1199a8477f489b6dc939092316d70", "extra_info": null, "index": 35, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "36": {"text": "without having to upload a replay file to the web visualizer.\n# \n# \n# \u304a\u3081\u3067\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\u30ea\u30d5\u30c8\u30aa\u30d5\u3067\u3059\u3002\u4e21\u30c1\u30fc\u30e0\u3068\u3082\u3001\u3044\u304f\u3064\u304b\u306e\u5de5\u5834\u3092\u7acb\u3061\u4e0a\u3052\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n# \u521d\u671f\u6bb5\u968e\u304c\u7d42\u308f\u3063\u305f\u306e\u3067\u3001\u6b21\u306e\u6bb5\u968e\u306b\u9032\u3080\u305f\u3081\u306e\u30ed\u30b8\u30c3\u30af\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u59cb\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n# \n# ### \u901a\u5e38\u30d5\u30a7\u30fc\u30ba\n# \n# \u30b2\u30fc\u30e0\u306e\u76ee\u6a19\u306f\u30011000\u30b9\u30c6\u30c3\u30d7\u306e\u30a8\u30d4\u30bd\u30fc\u30c9\uff08\u521d\u671f\u6bb5\u968e\u306e\u30b9\u30c6\u30c3\u30d7\u306f\u542b\u307e\u306a\u3044\uff09\u304c\u7d42\u4e86\u3059\u308b\u307e\u3067\u306b\u3001\n# \u76f8\u624b\u3088\u308a\u591a\u304f\u306e\u5730\u8863\u985e\u3092\u6210\u9577\u3055\u305b\u308b\u3053\u3068\u3067\u3042\u308b\u3002\u5730\u8863\u985e\u3092\u80b2\u3066\u308b\u305f\u3081\u306b\u306f\u3001\u5de5\u5834\u304c\u6c34\u3092\u6d88\u8cbb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n# \n#", "doc_id": "d02dfe6c-d3e2-403b-923f-3552f80186e7", "embedding": null, "doc_hash": "64391a69f69423369922a6c8b51f57c7e2db3aae0fd9cf982f8857c4bb79bd72", "extra_info": null, "index": 36, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "37": {"text": "\n# \u3055\u3089\u306b\u3001\u5de5\u5834\u306f1\u30bf\u30fc\u30f3\u306b1\u56de\u53d7\u52d5\u7684\u306b\u6c34\u3092\u6d88\u8cbb\u3059\u308b\u306e\u3067\u3001\u5c11\u306a\u304f\u3068\u30821\u3064\u306e\u5de5\u5834\u304c\u6700\u5f8c\u307e\u3067\u751f\u304d\u6b8b\u308b\u3088\u3046\u306b\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n# \u5148\u306b\u3059\u3079\u3066\u306e\u5de5\u5834\u3092\u5931\u3063\u305f\u30c1\u30fc\u30e0\u304c\u81ea\u52d5\u7684\u306b\u8ca0\u3051\u306b\u306a\u308a\u307e\u3059\u3002\n# \n# \u6c34\u3092\u5f97\u308b\u305f\u3081\u306b\u306f\u3001\u30ed\u30dc\u30c3\u30c8\u3084\u30e6\u30cb\u30c3\u30c8\u304c\u6c37\u30bf\u30a4\u30eb\uff08\u30de\u30c3\u30d7\u4e0a\u306e\u9752\uff09\u304b\u3089\u6c37\u3092\u63a1\u6398\u3057\u3001\n# \u305d\u308c\u3092\u5de5\u5834\u306b\u5c4a\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u5de5\u5834\u306f\u81ea\u52d5\u7684\u306b\u6c37\u3092\u6c34\u306b\u7cbe\u88fd\u3059\u308b\u3002\n# \n# \u3055\u3089\u306b\u3001\u3088\u308a\u826f\u3044\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u305f\u3081\u306b\u3001\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u95a2\u6570 `obs_to_game_state` \u3092\u4f7f\u3063\u3066\u3001\n# \u89b3\u6e2c\u7d50\u679c\u3092\u751f\u306e\u8f9e\u66f8\u304b\u3089\u5bfe\u8a71\u53ef\u80fd\u306a python", "doc_id": "7092be82-02ad-4523-8662-c4839949c86d", "embedding": null, "doc_hash": "31315bef0267e19e2f11b686fc94b266d6cf79d9808b3d1eb0591998beaa8ceb", "extra_info": null, "index": 37, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "38": {"text": "\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u63db\u3057\u307e\u3059\u3002\u6700\u5f8c\u306b\u3001\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b `animate` \u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001\n# \u30a8\u30d4\u30bd\u30fc\u30c9\u306e\u7c21\u5358\u306a\u30d3\u30c7\u30aa\u3092\u7c21\u5358\u306b\u751f\u6210\u3057\u3001\u30a6\u30a7\u30d6\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30b6\u306b\u518d\u751f\u30d5\u30a1\u30a4\u30eb\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u306a\u304f\u3001\u3053\u3053\u306b\u57cb\u3081\u8fbc\u3080\u4e88\u5b9a\u3067\u3059\u3002\n# \n\n# %% [markdown]\n# #### Building Robots\n# \n# Only factories can build robots, so for each factory on our team, if there is enough metal and power, we will issue a command to build a new heavy robot.\n# \n# More advanced strategies will be able to efficiently leverage light units as well to collect resources but for simplicity, this tutorial uses heavy robots since they don't need to move as often to collect many resources but can collect many at a time.\n# \n# \n# #### \u30ed\u30dc\u30c3\u30c8\u3092\u4f5c\u308b\n# \n# \u30ed\u30dc\u30c3\u30c8\u3092\u4f5c\u308c\u308b\u306e\u306f\u5de5\u5834\u3060\u3051\u306a\u306e\u3067\u3001\u30c1\u30fc\u30e0\u5185\u306e\u5404\u5de5\u5834\u306b\u3064\u3044\u3066\u3001\u5341\u5206\u306a\u91d1\u5c5e\u3068\u96fb\u529b\u304c\u3042\u308c\u3070\u3001\u65b0\u3057\u3044\u91cd\u3044\u30ed\u30dc\u30c3\u30c8\u3092\u4f5c\u308b\u547d\u4ee4\u3092\u51fa\u3057\u307e\u3059\u3002\n# \n#", "doc_id": "1ed86e1e-9f4f-42cb-8066-f027f29a48e1", "embedding": null, "doc_hash": "27f04a4335d02d9e9e1a3b942b4c6612266874277212b18718090f4c8f6618b9", "extra_info": null, "index": 38, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "39": {"text": "\n# \u3088\u308a\u9ad8\u5ea6\u306a\u6226\u7565\u3067\u306f\u3001\u8efd\u91cf\u306e\u30e6\u30cb\u30c3\u30c8\u3082\u52b9\u7387\u7684\u306b\u6d3b\u7528\u3057\u3066\u8cc7\u6e90\u3092\u96c6\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001\u591a\u304f\u306e\u8cc7\u6e90\u3092\u96c6\u3081\u308b\u305f\u3081\u306b\u983b\u7e41\u306b\u79fb\u52d5\u3059\u308b\u5fc5\u8981\u304c\u306a\u304f\u3001\u4e00\u5ea6\u306b\u591a\u304f\u306e\u8cc7\u6e90\u3092\u96c6\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081\u3001\u91cd\u91cf\u306e\u3042\u308b\u30ed\u30dc\u30c3\u30c8\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n# %%\nfrom lux.kit import obs_to_game_state, GameState\n\n# %%\n# \u3053\u306e\u30b3\u30fc\u30c9\u306f\u3001act\u30e1\u30bd\u30c3\u30c9\u3092\u518d\u5b9a\u7fa9\u3057\u3066\u3001\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306e\u884c\u52d5\u6c7a\u5b9a\u30ed\u30b8\u30c3\u30af\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n# \u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30b2\u30fc\u30e0\u306e\u901a\u5e38\u30d7\u30ec\u30a4\u4e2d\u306b\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u304c\u3069\u306e\u3088\u3046\u306b\u884c\u52d5\u3059\u308b\u304b\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\n\n# \u7a7a\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u8f9e\u66f8\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n#", "doc_id": "275f0561-a46d-43b8-aeab-ac308b1823bf", "embedding": null, "doc_hash": "d2a209d9c00b36f425e3dca735ee85c79f5ae74ac3aad74efa2e8f664fe42f40", "extra_info": null, "index": 39, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "40": {"text": "\u4e0e\u3048\u3089\u308c\u305f\u89b3\u6e2c\u5024\u3092\u4f7f\u3063\u3066\u3001\u30b2\u30fc\u30e0\u306e\u72b6\u614b\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n# \u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u304c\u6240\u5c5e\u3059\u308b\u30c1\u30fc\u30e0\u306e\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n# \u5404\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u306b\u3064\u3044\u3066\u3001\u4ee5\u4e0b\u306e\u6761\u4ef6\u304c\u6e80\u305f\u3055\u308c\u308b\u5834\u5408\u306b\u91cd\u3044\u30ed\u30dc\u30c3\u30c8\uff08HEAVY\uff09\u3092\u751f\u6210\u3059\u308b\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n# \u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u306e\u30d1\u30ef\u30fc\u304c\u91cd\u3044\u30ed\u30dc\u30c3\u30c8\u306e\u30d1\u30ef\u30fc\u30b3\u30b9\u30c8\u4ee5\u4e0a\u3067\u3042\u308b\u3002\n# \u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u306e\u91d1\u5c5e\uff08\u30e1\u30bf\u30eb\uff09\u304c\u91cd\u3044\u30ed\u30dc\u30c3\u30c8\u306e\u91d1\u5c5e\u30b3\u30b9\u30c8\u4ee5\u4e0a\u3067\u3042\u308b\u3002\n\n# \u30a2\u30af\u30b7\u30e7\u30f3\u8f9e\u66f8\u3092\u8fd4\u3057\u307e\u3059\u3002\n# \u3053\u306e\u518d\u5b9a\u7fa9\u306b\u3088\u308a\u3001\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306f\u30b2\u30fc\u30e0\u306e\u901a\u5e38\u30d7\u30ec\u30a4\u4e2d\u306b\u3001\u6761\u4ef6\u3092\u6e80\u305f\u3059\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u3067\u91cd\u3044\u30ed\u30dc\u30c3\u30c8\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n#", "doc_id": "0437d5d7-fccf-4f6b-adfe-c3e23d696a58", "embedding": null, "doc_hash": "a6c601e81fd17567b77ba18b75903a9567bc44f148e6e84869ef1bd18235c873", "extra_info": null, "index": 40, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "41": {"text": "\u3053\u308c\u306f\u3001\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306e\u6226\u7565\u3092\u62e1\u5f35\u3057\u3001\u30b2\u30fc\u30e0\u30d7\u30ec\u30a4\u4e2d\u306e\u884c\u52d5\u3092\u6700\u9069\u5316\u3059\u308b\u305f\u3081\u306e\u57fa\u672c\u7684\u306a\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\ndef act(self, step: int, obs, remainingOverageTime: int = 60):\n    actions = dict()\n    game_state: GameState = obs_to_game_state(step, self.env_cfg, obs)\n    factories = game_state.factories[self.player]\n    \n    for unit_id, factory in factories.items():\n        if factory.power >= self.env_cfg.ROBOTS[\"HEAVY\"].POWER_COST and \\\n        factory.cargo.metal >= self.env_cfg.ROBOTS[\"HEAVY\"].METAL_COST:\n            actions[unit_id] = factory.build_heavy()\n    return actions\n\nAgent.act = act\n\n# %%\n# recreate our agents and run\nagents = {player: Agent(player, env.state.env_cfg) for player in env.agents}\ninteract(env, agents, 25)\n\n# %% [markdown]\n# Robots built, but they're idle! Let's get them to", "doc_id": "c86c7ac9-ce9a-4aa1-b77d-80a8c200b0c6", "embedding": null, "doc_hash": "dd8943daee24a642994a7af62782e838bb4c5a6969642be9430b1033010e1768", "extra_info": null, "index": 41, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "42": {"text": "Robots built, but they're idle! Let's get them to work.\n# \n# #### Moving Robots and Mining\n# \n# We want the robots to find the closest ice tile and mine it.\n# We'll worry about delivering the ice back home later. Let's update our `act` function to add this functionality. We will iterate over all our units and find the closest ice tile. Then we will use a given utility function that gives us the direction that takes us towards the desired ice tile. Lastly, we check if we have enough power to move and can move in that direction and submit that action.\n# \n# Importantly, in this season **units are given action queues (a list of actions). Each time an action queue is given, the unit's old action queue is replaced completely in addition to a small additional action queue submission power cost.**\n# \n# Moreover, each action has two other attributes, its execution count `n` and `repeat`. Each time the action is succesfully executed, we decrement `n` by 1. If `n` hits 0, we remove the action from the action queue. If `repeat == 0`, then we don't recycle the action. If `repeat > 0`, then we **recycle the same action to the back of the action queue** but this time with `n = repeat`.\n# \n# For this tutorial, we will be giving units one action at a time with no action recycling or multiple executions. For more advanced competitors, to reduce power costs you may want to", "doc_id": "bdb435a6-1cd9-4c84-b033-202c08b96093", "embedding": null, "doc_hash": "646b7ba96f49ea492e22b42238b521fe1571040e1c0740cb7a6a2d584f98b92c", "extra_info": null, "index": 42, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "43": {"text": "For more advanced competitors, to reduce power costs you may want to submit longer action queues and only update the action queue every once in a while.\n# \n# \n# \u30ed\u30dc\u30c3\u30c8\u3092\u4f5c\u3063\u3066\u3082\u3001\u30a2\u30a4\u30c9\u30eb\u72b6\u614b! \u50cd\u304b\u305b\u3088\u3046\u3002\n# \n# #### \u30ed\u30dc\u30c3\u30c8\u306e\u79fb\u52d5\u3068\u63a1\u6398\n# \n# \u30ed\u30dc\u30c3\u30c8\u306b\u306f\u3001\u4e00\u756a\u8fd1\u3044\u6c37\u306e\u30bf\u30a4\u30eb\u3092\u898b\u3064\u3051\u3066\u63a1\u6398\u3057\u3066\u307b\u3057\u3044\u3093\u3067\u3059\u3002\n# \u6c37\u3092\u5bb6\u306b\u6301\u3061\u5e30\u308b\u3053\u3068\u306f\u5f8c\u3067\u8003\u3048\u3088\u3046\u3002\u3053\u306e\u6a5f\u80fd\u3092\u8ffd\u52a0\u3059\u308b\u305f\u3081\u306b\u3001`act`\u95a2\u6570\u3092\u66f4\u65b0\u3057\u307e\u3057\u3087\u3046\u3002\n# \n# \u3059\u3079\u3066\u306e\u30e6\u30cb\u30c3\u30c8\u3092\u7e70\u308a\u8fd4\u3057\u51e6\u7406\u3057\u3001\u6700\u3082\u8fd1\u3044\u6c37\u306e\u30bf\u30a4\u30eb\u3092\u898b\u3064\u3051\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u76ee\u7684\u306e\u6c37\u306e\u30bf\u30a4\u30eb\u306b\u5411\u304b\u3046\u65b9\u5411\u3092\u4e0e\u3048\u3066\u304f\u308c\u308b\u4e0e\u3048\u3089\u308c\u305f\u52b9\u7528\u95a2\u6570\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n#", "doc_id": "6d8ec37f-7385-40f7-a38c-5f63a8ae2edc", "embedding": null, "doc_hash": "6089143e50bd22a1638daaa2915fe025034abbc53bcef136b5873866b459d47c", "extra_info": null, "index": 43, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "44": {"text": "\u6700\u5f8c\u306b\u3001\u79fb\u52d5\u3059\u308b\u306e\u306b\u5341\u5206\u306a\u30d1\u30ef\u30fc\u304c\u3042\u308a\u3001\u305d\u306e\u65b9\u5411\u306b\u79fb\u52d5\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u305d\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n# \n# \u91cd\u8981\u306a\u306e\u306f\u3001\u3053\u306e\u30b7\u30fc\u30ba\u30f3\u3067\u306f\u3001**\u30e6\u30cb\u30c3\u30c8\u306b\u306f\u30a2\u30af\u30b7\u30e7\u30f3\u30ad\u30e5\u30fc\uff08\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u30ea\u30b9\u30c8\uff09\u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u3067\u3059\u3002\n# \u30a2\u30af\u30b7\u30e7\u30f3\u30ad\u30e5\u30fc\u304c\u4e0e\u3048\u3089\u308c\u308b\u305f\u3073\u306b\u3001\u30e6\u30cb\u30c3\u30c8\u306e\u53e4\u3044\u30a2\u30af\u30b7\u30e7\u30f3\u30ad\u30e5\u30fc\u306f\u3001\u5c0f\u3055\u306a\u8ffd\u52a0\u30a2\u30af\u30b7\u30e7\u30f3\u30ad\u30e5\u30fc\u63d0\u51fa\u30d1\u30ef\u30fc\u30b3\u30b9\u30c8\u306b\u52a0\u3048\u3066\u5b8c\u5168\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3059**\u3002\n# \n# \u3055\u3089\u306b\u3001\u5404\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u5b9f\u884c\u56de\u6570 `n` \u3068 `repeat`", "doc_id": "0fe88494-09af-4dca-b241-fde8fc071d23", "embedding": null, "doc_hash": "8b67798b917dc2f0510cd40c2d0152c82916c2d470bc053e814aa553fcaa7611", "extra_info": null, "index": 44, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "45": {"text": "`n` \u3068 `repeat` \u3068\u3044\u30462\u3064\u306e\u5c5e\u6027\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u6b63\u5e38\u306b\u5b9f\u884c\u3055\u308c\u308b\u305f\u3073\u306b\u3001`n`\u30921\u305a\u3064\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u307e\u3059\u3002\u3082\u3057`n`\u304c0\u306b\u306a\u3063\u305f\u3089\u3001\u30a2\u30af\u30b7\u30e7\u30f3\u30ad\u30e5\u30fc\u304b\u3089\u305d\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u524a\u9664\u3057\u307e\u3059\u3002\u3082\u3057 `repeat == 0` \u306a\u3089\u3070\u3001\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u518d\u5229\u7528\u3057\u306a\u3044\u3002\u3082\u3057 `repeat > 0` \u306a\u3089\u3070\u3001\u540c\u3058\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u30a2\u30af\u30b7\u30e7\u30f3\u30ad\u30e5\u30fc\u306e\u5f8c\u308d\u306b**\u30ea\u30b5\u30a4\u30af\u30eb\u3057\u307e\u3059\u304c\u3001\u4eca\u56de\u306f `n = repeat` \u3068\u3057\u307e\u3059\u3002\n# \n#", "doc_id": "7b98f1c3-54ac-44e6-ae43-3aead8bd8f5f", "embedding": null, "doc_hash": "dd348694a65a3c2724c8ec436517bd3c22fa93020b9226d95a22e5c18b30abe0", "extra_info": null, "index": 45, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "46": {"text": "`n = repeat` \u3068\u3057\u307e\u3059\u3002\n# \n# \u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u306f\u3001\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u30ea\u30b5\u30a4\u30af\u30eb\u3084\u8907\u6570\u56de\u306e\u5b9f\u884c\u3092\u884c\u308f\u305a\u3001\u4e00\u5ea6\u306b1\u3064\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u30e6\u30cb\u30c3\u30c8\u306b\u4e0e\u3048\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u3088\u308a\u9ad8\u5ea6\u306a\u7af6\u6280\u8005\u306e\u5834\u5408\u3001\u96fb\u529b\u30b3\u30b9\u30c8\u3092\u524a\u6e1b\u3059\u308b\u305f\u3081\u306b\u3001\u3088\u308a\u9577\u3044\u30a2\u30af\u30b7\u30e7\u30f3\u30ad\u30e5\u30fc\u3092\u63d0\u51fa\u3057\u3001\u30a2\u30af\u30b7\u30e7\u30f3\u30ad\u30e5\u30fc\u3092\u305f\u307e\u306b\u3057\u304b\u66f4\u65b0\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n# \n\n# %%\nfrom lux.utils import direction_to\nimport sys\n\n# \u3053\u306e\u30b3\u30fc\u30c9\u306f\u3001act\u30e1\u30bd\u30c3\u30c9\u3092\u518d\u5b9a\u7fa9\u3057\u3066\u3001\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306e\u884c\u52d5\u6c7a\u5b9a\u30ed\u30b8\u30c3\u30af\u3092\u3055\u3089\u306b\u62e1\u5f35\u3057\u3066\u3044\u307e\u3059\u3002\n# \u3053\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u306f\u3001\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u304c\u6240\u5c5e\u3059\u308b\u30c1\u30fc\u30e0\u306e\u30e6\u30cb\u30c3\u30c8\u304c\u6700\u3082\u8fd1\u3044\u6c37\u30bf\u30a4\u30eb\u3092\u63a2\u9271\u3059\u308b\u3088\u3046\u306b\u884c\u52d5\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n#", "doc_id": "5dcf468f-5b13-4ef6-8b8d-eb1a96b20aa7", "embedding": null, "doc_hash": "9b335ded1e162f17c14a17ec9bbb5b7bd513871fdef9bfa340555d06be4cb686", "extra_info": null, "index": 46, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "47": {"text": "\u4ee5\u524d\u306eact\u30e1\u30bd\u30c3\u30c9\u3067\u5b9f\u88c5\u3055\u308c\u305f\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u306e\u30ed\u30b8\u30c3\u30af\u3092\u7dad\u6301\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\n# \u6761\u4ef6\u3092\u6e80\u305f\u3059\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u3067\u91cd\u3044\u30ed\u30dc\u30c3\u30c8\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n# \u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u304c\u6240\u5c5e\u3059\u308b\u30c1\u30fc\u30e0\u306e\u30e6\u30cb\u30c3\u30c8\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n# \u30b2\u30fc\u30e0\u30dc\u30fc\u30c9\u4e0a\u306e\u6c37\u30bf\u30a4\u30eb\u306e\u4f4d\u7f6e\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n# \u5404\u30e6\u30cb\u30c3\u30c8\u306b\u3064\u3044\u3066\u3001\u4ee5\u4e0b\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n# \u6700\u3082\u8fd1\u3044\u6c37\u30bf\u30a4\u30eb\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\n\n# \u30e6\u30cb\u30c3\u30c8\u304c\u6c37\u30bf\u30a4\u30eb\u306b\u5230\u9054\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u53ef\u80fd\u3067\u3042\u308c\u3070\u6398\u524a\u3092\u958b\u59cb\u3057\u307e\u3059\u3002\n# \u305d\u3046\u3067\u306a\u3044\u5834\u5408\u3001\u6700\u3082\u8fd1\u3044\u6c37\u30bf\u30a4\u30eb\u306b\u5411\u304b\u3063\u3066\u79fb\u52d5\u3057\u307e\u3059\u3002\n#", "doc_id": "8c2f76d1-e3aa-42ca-ace4-b6c356621547", "embedding": null, "doc_hash": "e2ef1b7b489986063eae7a3700cb3e9da877ac9f2d42cb396e7ce9cbd1dc2f59", "extra_info": null, "index": 47, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "48": {"text": "\u30e6\u30cb\u30c3\u30c8\u306e\u8a73\u7d30\u3092\u30d7\u30ea\u30f3\u30c8\u3057\u307e\u3059\u3002\u6c37\u306e\u91cf\u304c50\u3092\u8d85\u3048\u3066\u3044\u308b\u5834\u5408\u3001\u305d\u306e\u60c5\u5831\u3082\u8868\u793a\u3057\u307e\u3059\u3002\n# \u30a2\u30af\u30b7\u30e7\u30f3\u8f9e\u66f8\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n# \u3053\u306e\u518d\u5b9a\u7fa9\u306b\u3088\u308a\u3001\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306f\u30b2\u30fc\u30e0\u306e\u901a\u5e38\u30d7\u30ec\u30a4\u4e2d\u306b\u3001\u30e6\u30cb\u30c3\u30c8\u304c\u6700\u3082\u8fd1\u3044\u6c37\u30bf\u30a4\u30eb\u3092\u63a2\u9271\u3059\u308b\u3088\u3046\u306b\u884c\u52d5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n# \u3053\u308c\u306f\u3001\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306e\u6226\u7565\u3092\u3055\u3089\u306b\u62e1\u5f35\u3057\u3001\u30b2\u30fc\u30e0\u30d7\u30ec\u30a4\u4e2d\u306e\u884c\u52d5\u3092\u6700\u9069\u5316\u3059\u308b\u305f\u3081\u306e\u57fa\u672c\u7684\u306a\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\n\ndef act(self, step: int, obs, remainingOverageTime: int = 60):\n    actions = dict()\n    game_state = obs_to_game_state(step, self.env_cfg, obs)\n    factories = game_state.factories[self.player]\n    \n    for unit_id, factory in factories.items():\n        if factory.power >=", "doc_id": "f45eff51-592f-46c4-ba26-3834a47a9c6a", "embedding": null, "doc_hash": "ac138d854bdeaffa961e6c4fc312e5a2ede5bee8bb9b0336c2f3468a451df56f", "extra_info": null, "index": 48, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "49": {"text": "factories.items():\n        if factory.power >= self.env_cfg.ROBOTS[\"HEAVY\"].POWER_COST and \\\n        factory.cargo.metal >= self.env_cfg.ROBOTS[\"HEAVY\"].METAL_COST:\n            actions[unit_id] = factory.build_heavy()\n            \n    # iterate over our units and have them mine the closest ice tile\n    units = game_state.units[self.player]\n    ice_map = game_state.board.ice # flip the board as it stores by rows then columns\n    ice_tile_locations = np.argwhere(ice_map == 1) # numpy magic to get the position of every ice tile\n    \n    for unit_id, unit in units.items():\n        # compute the distance to each ice tile from this unit and pick the closest\n        ice_tile_distances = np.mean((ice_tile_locations - unit.pos) ** 2, 1)\n        closest_ice_tile = ice_tile_locations[np.argmin(ice_tile_distances)]\n        \n        # if we have reached the ice tile, start mining", "doc_id": "d6f80232-e1f9-43cf-bff1-a2206f488eda", "embedding": null, "doc_hash": "a7d0db18337ed8f56dc6077f57cf8000c65492cd5a2966e6d6c333c87fcbc125", "extra_info": null, "index": 49, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "50": {"text": "\n        # if we have reached the ice tile, start mining if possible\n        if np.all(closest_ice_tile == unit.pos):\n            if unit.power >= unit.dig_cost(game_state) + unit.action_queue_cost(game_state):\n                actions[unit_id] = [unit.dig(repeat=0, n=1)]\n        else:\n            direction = direction_to(unit.pos, closest_ice_tile)\n            move_cost = unit.move_cost(game_state, direction)\n            # check move_cost is not None, meaning that direction is not off the map or blocked\n            # check if unit has enough power to move in addition to updating the action queue.\n            if move_cost is not None and unit.power >= move_cost + unit.action_queue_cost(game_state):\n                actions[unit_id] = [unit.move(direction, repeat=0, n=1)]\n        # since we are using the simple embedded visualizer, we will have to", "doc_id": "a81f006c-bdd5-49db-9b6b-5f055d35a376", "embedding": null, "doc_hash": "81b398e42502c948ce111b23090a71b86a560eed22b7b1433f9b03eb96bcb185", "extra_info": null, "index": 50, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "51": {"text": "    # since we are using the simple embedded visualizer, we will have to print out details about units\n        # importantly, note that we print with file=sys.stderr. Printing with anything will cause your agent to fail\n        if unit.cargo.ice > 50:\n            print(game_state.real_env_steps, unit, f\"has {unit.cargo.ice} ice\", file=sys.stderr)\n    return actions\nAgent.act = act\n\n# %%\n# recreate our agents and run\nagents = {player: Agent(player, env.state.env_cfg) for player in env.agents}\ninteract(env, agents, steps=40)\n\n# %% [markdown]\n# And they're off! The heavy robots have started to move towards the ice tiles and some have begun mining.\n# \n# #### Delivering Resources and Keep Factories Alive\n# We now have ice being mined, but we now need to deliver that back to the factories so they can refine that ice into water and sustain themselves.\n# \n# \n# \u305d\u3057\u3066\u3001\u51fa\u767a\u3067\u3059 \u91cd\u3044\u30ed\u30dc\u30c3\u30c8\u304c\u6c37\u306e\u30bf\u30a4\u30eb\u306b\u5411\u304b\u3063\u3066\u79fb\u52d5\u3057\u59cb\u3081\u3001\u4e00\u90e8\u306f\u63a1\u6398\u3092\u59cb\u3081\u3066\u3044\u308b\u3002\n# \n# ####", "doc_id": "be852d92-7e13-44fc-b23d-582bdbf644f1", "embedding": null, "doc_hash": "feb33bf32943fe350bfef3e69b143953dd54ec55d9c989f2f5ca84013f5579ce", "extra_info": null, "index": 51, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "52": {"text": "\n# #### \u8cc7\u6e90\u3092\u904b\u3073\u3001\u5de5\u5834\u3092\u5b58\u7d9a\u3055\u305b\u308b\u3002\n# \u4eca\u3001\u6c37\u3092\u63a1\u6398\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u6c37\u3092\u5de5\u5834\u306b\u623b\u3057\u3066\u3001\u6c37\u3092\u6c34\u306b\u7cbe\u88fd\u3057\u3066\u3001\u81ea\u5206\u305f\u3061\u306e\u751f\u6d3b\u3092\u7dad\u6301\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\n# %%\n# \u3053\u306e\u30b3\u30fc\u30c9\u306f\u3001act\u30e1\u30bd\u30c3\u30c9\u3092\u3055\u3089\u306b\u66f4\u65b0\u3057\u3066\u3001\u30e6\u30cb\u30c3\u30c8\u304c\u6c37\u3092\u63a1\u6398\u3057\u305f\u5f8c\u3001\u6700\u3082\u8fd1\u3044\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u306b\u623b\u3063\u3066\u6c37\u3092\u6295\u5165\u3059\u308b\u3088\u3046\u306b\u884c\u52d5\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n# \u4ee5\u524d\u306eact\u30e1\u30bd\u30c3\u30c9\u3067\u5b9f\u88c5\u3055\u308c\u305f\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u306e\u30ed\u30b8\u30c3\u30af\u3092\u7dad\u6301\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u6761\u4ef6\u3092\u6e80\u305f\u3059\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u3067\u91cd\u3044\u30ed\u30dc\u30c3\u30c8\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n# \u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u304c\u6240\u5c5e\u3059\u308b\u30c1\u30fc\u30e0\u306e\u30e6\u30cb\u30c3\u30c8\u3068\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u306e\u4f4d\u7f6e\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n#", "doc_id": "7fdd6721-f006-411a-aed8-65c02700e263", "embedding": null, "doc_hash": "0c85b2984336c59612252c1a64d9a24577d3b47f960682c2f9a6a2b613fbf659", "extra_info": null, "index": 52, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "53": {"text": "\u5404\u30e6\u30cb\u30c3\u30c8\u306b\u3064\u3044\u3066\u3001\u4ee5\u4e0b\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n# \u6700\u3082\u8fd1\u3044\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u3092\u7279\u5b9a\u3057\u307e\u3059\u3002\n# \u30e6\u30cb\u30c3\u30c8\u304c\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u306b\u96a3\u63a5\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n# \u30e6\u30cb\u30c3\u30c8\u306e\u6c37\u306e\u91cf\u304c40\u672a\u6e80\u306e\u5834\u5408\u3001\u4ee5\u524d\u306e\u30ed\u30b8\u30c3\u30af\u306b\u5f93\u3063\u3066\u6c37\u30bf\u30a4\u30eb\u3092\u63a2\u9271\u3057\u307e\u3059\u3002\n# \u30e6\u30cb\u30c3\u30c8\u306e\u6c37\u306e\u91cf\u304c40\u4ee5\u4e0a\u306e\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n# \u30e6\u30cb\u30c3\u30c8\u304c\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u306b\u96a3\u63a5\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u6c37\u3092\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u306b\u8ee2\u9001\u3057\u307e\u3059\u3002\n# \u305d\u3046\u3067\u306a\u3044\u5834\u5408\u3001\u6700\u3082\u8fd1\u3044\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u306b\u5411\u304b\u3063\u3066\u79fb\u52d5\u3057\u307e\u3059\u3002\n\n# \u30a2\u30af\u30b7\u30e7\u30f3\u8f9e\u66f8\u3092\u8fd4\u3057\u307e\u3059\u3002\n#", "doc_id": "6d11517e-1c2e-4f35-8e1b-acd6afe8ea89", "embedding": null, "doc_hash": "a1ab6a3aeb7ec6775cfc60e4cc25c2d3b05e4dc5a080a7a9ed2e0cf54322e269", "extra_info": null, "index": 53, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "54": {"text": "\u3053\u306e\u66f4\u65b0\u306b\u3088\u308a\u3001\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306f\u3001\u30e6\u30cb\u30c3\u30c8\u304c\u6c37\u3092\u63a1\u6398\u3057\u305f\u5f8c\u3001\u6700\u3082\u8fd1\u3044\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u306b\u623b\u3063\u3066\u6c37\u3092\u6295\u5165\u3059\u308b\u3088\u3046\u306b\u884c\u52d5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306f\u3088\u308a\u52b9\u679c\u7684\u306b\u8cc7\u6e90\u3092\u53ce\u96c6\u3057\u3001\u6226\u7565\u3092\u6700\u9069\u5316\u3067\u304d\u307e\u3059\u3002\n\n\ndef act(self, step: int, obs, remainingOverageTime: int = 60):\n    actions = dict()\n    game_state = obs_to_game_state(step, self.env_cfg, obs)\n    factories = game_state.factories[self.player]\n    factory_tiles, factory_units = [], []\n    for unit_id, factory in factories.items():\n        if factory.power >= self.env_cfg.ROBOTS[\"HEAVY\"].POWER_COST and \\\n        factory.cargo.metal >= self.env_cfg.ROBOTS[\"HEAVY\"].METAL_COST:\n            actions[unit_id] = factory.build_heavy()\n        factory_tiles +=", "doc_id": "aec9651c-7fa3-4e1d-9848-a38b66ae9c61", "embedding": null, "doc_hash": "9b3f73e1f52ba2f2533492564494739a27f7f5e5867a66f35f19153cf8eb7f65", "extra_info": null, "index": 54, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "55": {"text": "       factory_tiles += [factory.pos]\n        factory_units += [factory]\n    factory_tiles = np.array(factory_tiles)\n\n    units = game_state.units[self.player]\n    ice_map = game_state.board.ice\n    ice_tile_locations = np.argwhere(ice_map == 1)\n    for unit_id, unit in units.items():\n        \n        # track the closest factory\n        closest_factory = None\n        adjacent_to_factory = False\n        if len(factory_tiles) > 0:\n            factory_distances = np.mean((factory_tiles - unit.pos) ** 2, 1)\n            closest_factory_tile = factory_tiles[np.argmin(factory_distances)]\n            closest_factory = factory_units[np.argmin(factory_distances)]\n            adjacent_to_factory = np.mean((closest_factory_tile - unit.pos) ** 2) == 0\n     ", "doc_id": "24309a39-58d0-49b6-ac0d-4f6c573c968b", "embedding": null, "doc_hash": "5e09d9b44d969bcbfb1389027792130856af06eec4b4e344ccee8184bb4fc171", "extra_info": null, "index": 55, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "56": {"text": "- unit.pos) ** 2) == 0\n        \n            # previous ice mining code\n            if unit.cargo.ice < 40:\n                ice_tile_distances = np.mean((ice_tile_locations - unit.pos) ** 2, 1)\n                closest_ice_tile = ice_tile_locations[np.argmin(ice_tile_distances)]\n                if np.all(closest_ice_tile == unit.pos):\n                    if unit.power >= unit.dig_cost(game_state) + unit.action_queue_cost(game_state):\n                        actions[unit_id] = [unit.dig(repeat=0, n=1)]\n                else:\n                    direction = direction_to(unit.pos, closest_ice_tile)\n                    move_cost =", "doc_id": "9147b5fa-1335-4f12-b6b1-afb4baaa694e", "embedding": null, "doc_hash": "e2ee1d401ac4af27f524112c6127e93cbb9466679e14e70a281dbfe95690a6ca", "extra_info": null, "index": 56, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "57": {"text": "                move_cost = unit.move_cost(game_state, direction)\n                    if move_cost is not None and unit.power >= move_cost + unit.action_queue_cost(game_state):\n                        actions[unit_id] = [unit.move(direction, repeat=0, n=1)]\n                        \n            # else if we have enough ice, we go back to the factory and dump it.\n            elif unit.cargo.ice >= 40:\n                direction = direction_to(unit.pos, closest_factory_tile)\n                if adjacent_to_factory:\n                    if unit.power >= unit.action_queue_cost(game_state):\n                        actions[unit_id] = [unit.transfer(direction, 0, unit.cargo.ice, repeat=0,", "doc_id": "59e3db3d-457e-4de3-8a53-156c228634a5", "embedding": null, "doc_hash": "e0a09e6de4d5f02be3bf2016af6cef7e67874eaca0fe3b7aed0cfee7979a634c", "extra_info": null, "index": 57, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "58": {"text": "[unit.transfer(direction, 0, unit.cargo.ice, repeat=0, n=1)]\n                else:\n                    move_cost = unit.move_cost(game_state, direction)\n                    if move_cost is not None and unit.power >= move_cost + unit.action_queue_cost(game_state):\n                        actions[unit_id] = [unit.move(direction, repeat=0, n=1)]\n    return actions\nAgent.act = act\n\n# %%\n# recreate our agents and run\nagents = {player: Agent(player, env.state.env_cfg) for player in env.agents}\ninteract(env, agents, 300)\n\n# %% [markdown]\n# Some factories are surviving for for more than 150 steps thanks to the delivery of additional ice, but more work will need to be done to keep them alive longer.\n# \n# Puting all those pieces together the full starter agent looks like this (and we will save it to agent.py)\n# \n# \n#", "doc_id": "95e2ba4e-b68f-46f3-8c52-cb35cc83c65b", "embedding": null, "doc_hash": "146b2a269c3ac2388f733cc62c7742a625ad6da2fa118ce3abbe08032c50c581", "extra_info": null, "index": 58, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "59": {"text": "like this (and we will save it to agent.py)\n# \n# \n# \u3044\u304f\u3064\u304b\u306e\u5de5\u5834\u306f\u3001\u8ffd\u52a0\u306e\u6c37\u306e\u914d\u9001\u306e\u304a\u304b\u3052\u3067150\u30b9\u30c6\u30c3\u30d7\u4ee5\u4e0a\u751f\u5b58\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u3088\u308a\u9577\u304f\u751f\u5b58\u3055\u305b\u308b\u305f\u3081\u306b\u306f\u3001\u3088\u308a\u591a\u304f\u306e\u4f5c\u696d\u304c\u5fc5\u8981\u3067\u3059\u3002\n# \u3053\u308c\u3089\u306e\u30d4\u30fc\u30b9\u3092\u307e\u3068\u3081\u308b\u3068\u3001\u5b8c\u5168\u306a\u30b9\u30bf\u30fc\u30bf\u30fc\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff08agent.py\u306b\u4fdd\u5b58\u3057\u307e\u3059\uff09\u3002\n# \n\n# %%\n%%writefile agent.py\nfrom lux.kit import obs_to_game_state, GameState, EnvConfig\nfrom lux.utils import direction_to, my_turn_to_place_factory\nimport numpy as np\nimport sys\n\nclass Agent():\n    def __init__(self, player: str, env_cfg: EnvConfig) -> None:\n        self.player = player\n        self.opp_player = \"player_1\" if self.player == \"player_0\" else \"player_0\"\n        np.random.seed(0)\n        self.env_cfg: EnvConfig = env_cfg\n\n  ", "doc_id": "e17fa54f-3285-482b-9d7d-397bb68dba2f", "embedding": null, "doc_hash": "b1264f43f87df5d3022b429dd18b590f76a45f577d56f4e4fb9015fd7c869020", "extra_info": null, "index": 59, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "60": {"text": "  self.env_cfg: EnvConfig = env_cfg\n\n    def early_setup(self, step: int, obs, remainingOverageTime: int = 60):\n        if step == 0:\n            # bid 0 to not waste resources bidding and declare as the default faction\n            return dict(faction=\"AlphaStrike\", bid=0)\n        else:\n            game_state = obs_to_game_state(step, self.env_cfg, obs)\n            # factory placement period\n\n            # how much water and metal you have in your starting pool to give to new factories\n            water_left = game_state.teams[self.player].water\n            metal_left = game_state.teams[self.player].metal\n\n            # how many factories you have left to place\n            factories_to_place = game_state.teams[self.player].factories_to_place\n            # whether it is your turn to place a factory\n           ", "doc_id": "d093fff0-ea8b-4a8b-b61f-012ac6b9c2ff", "embedding": null, "doc_hash": "d70e1f46b64bcae7e806fb4bd0a762a1aec2aab607c6e54fd754ffb08cececcd", "extra_info": null, "index": 60, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "61": {"text": "turn to place a factory\n            my_turn_to_place = my_turn_to_place_factory(game_state.teams[self.player].place_first, step)\n            if factories_to_place > 0 and my_turn_to_place:\n                # we will spawn our factory in a random location with 150 metal and water if it is our turn to place\n                potential_spawns = np.array(list(zip(*np.where(obs[\"board\"][\"valid_spawns_mask\"] == 1))))\n                spawn_loc = potential_spawns[np.random.randint(0, len(potential_spawns))]\n                return dict(spawn=spawn_loc, metal=150, water=150)\n            return dict()\n\n\n    def act(self, step: int, obs, remainingOverageTime: int = 60):\n        actions = dict()\n        game_state = obs_to_game_state(step, self.env_cfg, obs)\n        factories = game_state.factories[self.player]\n ", "doc_id": "6a367e25-95aa-47a2-b812-d5cf379c47c1", "embedding": null, "doc_hash": "030f4fd90d809f536523396980870d82ccb5469bd97e9fb9c112f3870dbf1579", "extra_info": null, "index": 61, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "62": {"text": "  factories = game_state.factories[self.player]\n        game_state.teams[self.player].place_first\n        factory_tiles, factory_units = [], []\n        for unit_id, factory in factories.items():\n            if factory.power >= self.env_cfg.ROBOTS[\"HEAVY\"].POWER_COST and \\\n            factory.cargo.metal >= self.env_cfg.ROBOTS[\"HEAVY\"].METAL_COST:\n                actions[unit_id] = factory.build_heavy()\n            if self.env_cfg.max_episode_length - game_state.real_env_steps < 50:\n                if factory.water_cost(game_state) <= factory.cargo.water:\n                    actions[unit_id] = factory.water()\n            factory_tiles += [factory.pos]\n            factory_units += [factory]\n       ", "doc_id": "0dd23747-1bc0-42e7-aeff-d88241c4cf15", "embedding": null, "doc_hash": "027951b97fe8c53d644cc94774e9f4cb35522329a586d17a1f6d8987e1d9139d", "extra_info": null, "index": 62, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "63": {"text": " factory_units += [factory]\n        factory_tiles = np.array(factory_tiles)\n\n        units = game_state.units[self.player]\n        ice_map = game_state.board.ice\n        ice_tile_locations = np.argwhere(ice_map == 1)\n        for unit_id, unit in units.items():\n\n            # track the closest factory\n            closest_factory = None\n            adjacent_to_factory = False\n            if len(factory_tiles) > 0:\n                factory_distances = np.mean((factory_tiles - unit.pos) ** 2, 1)\n                closest_factory_tile = factory_tiles[np.argmin(factory_distances)]\n                closest_factory = factory_units[np.argmin(factory_distances)]\n                adjacent_to_factory =", "doc_id": "b6ad55c6-50dc-4620-8cd0-495a89bf4d8e", "embedding": null, "doc_hash": "2ed9912df534ea183bf55cf5f641f31ef6b7e874012fc0f73caf86d4c4414855", "extra_info": null, "index": 63, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "64": {"text": "          adjacent_to_factory = np.mean((closest_factory_tile - unit.pos) ** 2) == 0\n\n                # previous ice mining code\n                if unit.cargo.ice < 40:\n                    ice_tile_distances = np.mean((ice_tile_locations - unit.pos) ** 2, 1)\n                    closest_ice_tile = ice_tile_locations[np.argmin(ice_tile_distances)]\n                    if np.all(closest_ice_tile == unit.pos):\n                        if unit.power >= unit.dig_cost(game_state) + unit.action_queue_cost(game_state):\n                            actions[unit_id] = [unit.dig(repeat=0, n=1)]\n                    else:\n              ", "doc_id": "ad6b6897-00ee-4dae-ac8a-3960cd323e09", "embedding": null, "doc_hash": "4f7d65e3c4a56597930d1a078387e3f22e175c1c1f0abefc2d76696b0c08c729", "extra_info": null, "index": 64, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "65": {"text": " else:\n                        direction = direction_to(unit.pos, closest_ice_tile)\n                        move_cost = unit.move_cost(game_state, direction)\n                        if move_cost is not None and unit.power >= move_cost + unit.action_queue_cost(game_state):\n                            actions[unit_id] = [unit.move(direction, repeat=0, n=1)]\n                # else if we have enough ice, we go back to the factory and dump it.\n                elif unit.cargo.ice >= 40:\n                    direction = direction_to(unit.pos, closest_factory_tile)\n                    if adjacent_to_factory:\n                        if unit.power >=", "doc_id": "dc2f2aa9-b8f6-4131-aa3c-fbff3995182e", "embedding": null, "doc_hash": "f3249f15632834541772c21a9e679ca87554d69b6231fea12eb4bdb58e640610", "extra_info": null, "index": 65, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "66": {"text": "            if unit.power >= unit.action_queue_cost(game_state):\n                            actions[unit_id] = [unit.transfer(direction, 0, unit.cargo.ice, repeat=0, n=1)]\n                    else:\n                        move_cost = unit.move_cost(game_state, direction)\n                        if move_cost is not None and unit.power >= move_cost + unit.action_queue_cost(game_state):\n                            actions[unit_id] = [unit.move(direction, repeat=0, n=1)]\n        return actions\n\n# %% [markdown]\n# ## Create a submission\n# Now we need to create a .tar.gz file with main.py (and agent.py) at the top level. We can then upload this!\n\n# %%\n!tar -czf submission.tar.gz *\n\n# %% [markdown]\n# ## Submit\n# Now open the /kaggle/working folder and find", "doc_id": "73ce4900-0838-4d63-a41c-cb40455f8375", "embedding": null, "doc_hash": "611a64e140ef0df9b3ef2745034f9e91049a1f68ae1c82459ba29e8336a6fff2", "extra_info": null, "index": 66, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "67": {"text": "## Submit\n# Now open the /kaggle/working folder and find submission.tar.gz, download that file, navigate to the \"MySubmissions\" tab in https://www.kaggle.com/c/lux-ai-2022-beta/ and upload your submission! It should play a validation match against itself and once it succeeds it will be automatically matched against other players' submissions. Newer submissions will be prioritized for games over older ones. Your team is limited in the number of succesful submissions per day so we highly recommend testing your bot locally before submitting.\n# \n# #\u6295\u7a3f\n# \u6b21\u306b\u3001/kaggle/working\u30d5\u30a9\u30eb\u30c0\u3092\u958b\u304d\u3001submission.tar.gz\u3092\u898b\u3064\u3051\u3001\u305d\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001https://www.kaggle.com/c/lux-ai-2022-beta/", "doc_id": "e8963106-6bcf-43bd-b90a-bdb8c5b991ea", "embedding": null, "doc_hash": "a3416796588c548ccb1f6f4c20ba23df2deddcb5a5655e147281fb53e6646bea", "extra_info": null, "index": 67, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "68": {"text": "\u306e\u300cMySubmissions\u300d\u30bf\u30d6\u306b\u79fb\u52d5\u3057\u3066\u6295\u7a3f\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\u81ea\u5206\u81ea\u8eab\u3068\u306e\u691c\u8a3c\u30de\u30c3\u30c1\u304c\u884c\u308f\u308c\u3001\u6210\u529f\u3059\u308b\u3068\u4ed6\u306e\u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u6295\u7a3f\u3068\u81ea\u52d5\u7684\u306b\u30de\u30c3\u30c1\u30f3\u30b0\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002\u65b0\u3057\u3044\u6295\u7a3f\u306f\u3001\u53e4\u3044\u6295\u7a3f\u3088\u308a\u3082\u512a\u5148\u7684\u306b\u30b2\u30fc\u30e0\u306b\u53c2\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3042\u306a\u305f\u306e\u30c1\u30fc\u30e0\u306f\u30011\u65e5\u306b\u6210\u529f\u3059\u308b\u6295\u7a3f\u306e\u6570\u304c\u5236\u9650\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u6295\u7a3f\u3059\u308b\u524d\u306b\u30ed\u30fc\u30ab\u30eb\u3067\u30dc\u30c3\u30c8\u3092\u30c6\u30b9\u30c8\u3059\u308b\u3053\u3068\u3092\u5f37\u304f\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\n\n# %% [markdown]\n# ## CLI Tool\n# \n# To test your agent without using the python API you can also run\n# \n# \n# ## CLI\u30c4\u30fc\u30eb\n# \n# python API\u3092\u4f7f\u7528\u305b\u305a\u306b\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u3092\u30c6\u30b9\u30c8\u3059\u308b\u306b\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u5b9f\u884c\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n# \n\n# %%\n!luxai-s2 main.py main.py -v 2 -s 101", "doc_id": "afb1433f-1e6c-4198-bdce-43861df7f0d1", "embedding": null, "doc_hash": "5fd5a8c6b4a4617272fc6644dfa17f1f6b7060bdd71272f4154342373de8b2b7", "extra_info": null, "index": 68, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "69": {"text": "main.py main.py -v 2 -s 101 -o replay.html\n\n# %% [markdown]\n# which uses a random seed and generates a replay.html file that you can click and watch. Optionally if you specify `-o replay.json` you can upload replay.json to http://s2vis.lux-ai.org/.\n# \n# The CLI tool enables you to easily run episodes between any two agents (python or not) and provides a flexible tournament running tool to evaluate many agents together. Documentation on this tool can be found here: https://github.com/Lux-AI-Challenge/Lux-Design-S2/tree/main/luxai_runner/README.md\n# \n# \n# \u3053\u308c\u306f\u30e9\u30f3\u30c0\u30e0\u306a\u7a2e\u3092\u4f7f\u3044\u3001\u30af\u30ea\u30c3\u30af\u3057\u3066\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u308breplay.html\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u30aa\u30d7\u30b7\u30e7\u30f3\u3067 `-o replay.json` \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001replay.json \u3092 http://s2vis.lux-ai.org/ \u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n# \n#", "doc_id": "23d4171a-7c9b-4ad9-b0f9-8fbc1e09497d", "embedding": null, "doc_hash": "20f2c12736aaa48dd75cbade8669a89ee15944485434f7c8d22d3c6f10a228e4", "extra_info": null, "index": 69, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "70": {"text": "\n# CLI\u30c4\u30fc\u30eb\u306f\u3001\u4efb\u610f\u306e2\u3064\u306e\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\uff08python\u304b\u3069\u3046\u304b\u306f\u554f\u308f\u306a\u3044\uff09\u9593\u3067\u7c21\u5358\u306b\u30a8\u30d4\u30bd\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u591a\u304f\u306e\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u3092\u4e00\u7dd2\u306b\u8a55\u4fa1\u3059\u308b\u305f\u3081\u306e\u67d4\u8edf\u306a\u30c8\u30fc\u30ca\u30e1\u30f3\u30c8\u5b9f\u884c\u30c4\u30fc\u30eb\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u3053\u306e\u30c4\u30fc\u30eb\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u3053\u3061\u3089\u3067\u3054\u89a7\u3044\u305f\u3060\u3051\u307e\u3059: https://github.com/Lux-AI-Challenge/Lux-Design-S2/tree/main/luxai_runner/README.md\n# \n\n# %%\nimport IPython # load the HTML replay\nIPython.display.HTML(filename='replay.html')\n\n# %%\n\n\n\n", "doc_id": "f5116837-8a63-42d7-99ab-4540de2970e1", "embedding": null, "doc_hash": "0dc8916965e527b971e7949623763261bca81506fb60ce70872396614438a20f", "extra_info": null, "index": 70, "child_indices": [], "ref_doc_id": "98820b34-8aa4-4bcc-8e51-a9cedc877da1", "node_info": null, "image": null}, "71": {"text": "\u4e0b\u8a18\u306e\u30b3\u30fc\u30c9\u306f\u3001agent.py\u3067\u5b9a\u7fa9\u3055\u308c\u305fAgent\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3057\u3066Lux AI\u30b3\u30f3\u30da\u30c6\u30a3\u30b7\u30e7\u30f3\u306e\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\u3053\u306e\u30b3\u30fc\u30c9\u306f\u3001Kaggle\u74b0\u5883\u3067\u5b9f\u884c\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u3067\u3059\u3002  \u4ee5\u4e0b\u306e\u624b\u9806\u3067\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002  agent.py\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e\u4e2d\u306b\u5148\u7a0b\u63d0\u4f9b\u3057\u305fAgent\u30af\u30e9\u30b9\u306e\u30b3\u30fc\u30c9\u3092\u8cbc\u308a\u4ed8\u3051\u307e\u3059\u3002 \u3053\u306e\u8cea\u554f\u3067\u63d0\u4f9b\u3055\u308c\u305f\u30b3\u30fc\u30c9\u3092main.py\u3068\u3044\u3046\u65b0\u3057\u3044\u30d5\u30a1\u30a4\u30eb\u306b\u8cbc\u308a\u4ed8\u3051\u307e\u3059\u3002main.py\u306fagent.py\u3068\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 Kaggle\u74b0\u5883\u307e\u305f\u306f\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067main.py\u3092\u5b9f\u884c\u3057\u3066\u3001\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u304c\u52d5\u4f5c\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002", "doc_id": "dda31f99-e98d-48d7-a196-d178c12f9de4", "embedding": null, "doc_hash": "d2462e78d32869d7580f6560e1d27f3639a7791477a11e827b58feab787317f3", "extra_info": null, "index": 71, "child_indices": [], "ref_doc_id": "26e30db1-5df8-42fd-b084-c35ec4d0c709", "node_info": null, "image": null}, "72": {"text": "\u3053\u306e\u30b3\u30fc\u30c9\u306f\u3001\u6a19\u6e96\u5165\u529b\u304b\u3089\u306e\u5165\u529b\u3092\u8aad\u307f\u53d6\u308a\u3001\u89b3\u6e2c\u3068\u8a2d\u5b9a\u3092\u51e6\u7406\u3057\u3001\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u53d6\u5f97\u3057\u3066\u3001\u6a19\u6e96\u51fa\u529b\u306b\u66f8\u304d\u8fbc\u3080\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u3001Kaggle\u74b0\u5883\u3067\u306e\u5b9f\u884c\u304c\u4e3b\u306a\u76ee\u7684\u3067\u3059\u3002  \u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u30c6\u30b9\u30c8\u3059\u308b\u5834\u5408\u3001Lux AI\u306e\u516c\u5f0f\u30b9\u30bf\u30fc\u30bf\u30fc\u30ad\u30c3\u30c8\u3092\u4f7f\u7528\u3057\u3066\u74b0\u5883\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3057\u3066\u3001\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001\u516c\u5f0fGitHub\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\nimport json\nfrom typing import Dict\nimport sys\nfrom argparse import Namespace\n\nfrom agent import Agent\nfrom lux.config import EnvConfig\nfrom lux.kit import GameState, process_obs, to_json, from_json, process_action, obs_to_game_state\n### DO NOT REMOVE THE FOLLOWING CODE ###\nagent_dict = dict() # store potentially multiple dictionaries as kaggle", "doc_id": "84de0124-6996-4ef0-84e3-56ac9fe561f2", "embedding": null, "doc_hash": "19453c7a41276036291cbb553d8c533e98a82546336218472b882fbb86951872", "extra_info": null, "index": 72, "child_indices": [], "ref_doc_id": "26e30db1-5df8-42fd-b084-c35ec4d0c709", "node_info": null, "image": null}, "73": {"text": "###\nagent_dict = dict() # store potentially multiple dictionaries as kaggle imports code directly\nagent_prev_obs = dict()\ndef agent_fn(observation, configurations):\n    \"\"\"\n    agent definition for kaggle submission.\n    \"\"\"\n    global agent_dict\n    step = observation.step\n    \n    \n    player = observation.player\n    remainingOverageTime = observation.remainingOverageTime\n    if step == 0:\n        env_cfg = EnvConfig.from_dict(configurations[\"env_cfg\"])\n        agent_dict[player] = Agent(player, env_cfg)\n        agent_prev_obs[player] = dict()\n        agent = agent_dict[player]\n    agent = agent_dict[player]\n    obs = process_obs(player, agent_prev_obs[player], step, json.loads(observation.obs))\n    agent_prev_obs[player] = obs\n    agent.step = step\n    if obs[\"real_env_steps\"] < 0:\n        actions = agent.early_setup(step, obs, remainingOverageTime)\n    else:\n        actions = agent.act(step, obs,", "doc_id": "3b26478d-05b6-49a7-a7a8-df2a3dedf077", "embedding": null, "doc_hash": "810038b89dfd10c32dec3d6a028ff6d3537cd369a28f3663afc3946057123006", "extra_info": null, "index": 73, "child_indices": [], "ref_doc_id": "26e30db1-5df8-42fd-b084-c35ec4d0c709", "node_info": null, "image": null}, "74": {"text": "else:\n        actions = agent.act(step, obs, remainingOverageTime)\n\n    return process_action(actions)\n\nif __name__ == \"__main__\":\n    \n    def read_input():\n        \"\"\"\n        Reads input from stdin\n        \"\"\"\n        try:\n            return input()\n        except EOFError as eof:\n            raise SystemExit(eof)\n    step = 0\n    player_id = 0\n    configurations = None\n    i = 0\n    while True:\n        inputs = read_input()\n        obs = json.loads(inputs)\n        \n        observation = Namespace(**dict(step=obs[\"step\"], obs=json.dumps(obs[\"obs\"]), remainingOverageTime=obs[\"remainingOverageTime\"], player=obs[\"player\"], info=obs[\"info\"]))\n        if i == 0:\n            configurations = obs[\"info\"][\"env_cfg\"]\n        i += 1\n        actions =", "doc_id": "8d1c219a-0e00-49c7-9933-569968ff12d6", "embedding": null, "doc_hash": "6a49ca2b778583d5863e75cf0d9610ade7942c3fb84ae2305d6a0c05d8ec5225", "extra_info": null, "index": 74, "child_indices": [], "ref_doc_id": "26e30db1-5df8-42fd-b084-c35ec4d0c709", "node_info": null, "image": null}, "75": {"text": "       i += 1\n        actions = agent_fn(observation, dict(env_cfg=configurations))\n        # send actions to engine\n        print(json.dumps(actions))", "doc_id": "a58c6a3b-f67a-4a75-9d54-8e0698e4a387", "embedding": null, "doc_hash": "ba324ece3aa008f0883b56f184e59ef1a99d0d4abe39b0d03a034effb7562604", "extra_info": null, "index": 75, "child_indices": [], "ref_doc_id": "26e30db1-5df8-42fd-b084-c35ec4d0c709", "node_info": null, "image": null}, "76": {"text": "Lux AI Season 2 Python Kit\nThis is the folder for the Python kit. Please make sure to read the instructions as they are important regarding how you will write a bot and submit it to the competition.\n\nMake sure to check our Discord or the Kaggle forums for announcements if there are any breaking changes.\n\nRequirements\nYou will need Python 3.7 or higher and NumPy installed (which should come with the dependencies you installed for the environment)\n\nGetting Started\nTo get started, download this folder from this repository.\n\nYour core agent code will go into agent.py, and you can create and use more files to help you as well. You should leave main.py alone as that code enables your agent to compete against other agents locally and on Kaggle.\n\nTo quickly test run your agent, run\n\nluxai-s2 main.py main.py --out=replay.json\nThis will run the agent.py code in the same folder as main.py and generate a replay file saved to replay.json.\n\nDeveloping\nNow that you have the code up and running, you are ready to start programming and having some fun!\n\nIf you haven't read it already, take a look at the design specifications for the competition. This will go through the rules and objectives of the competition. For a in-depth tutorial, we provide a jupyter notebook both locally and on Kaggle\n\nAll of our kits follow a common API through which you can use to access various functions and properties that will help you", "doc_id": "41766a3c-edb0-4705-8e03-c6032def6d21", "embedding": null, "doc_hash": "49698564c0d00c1419f7bbe7551d2dbe74ca9aba24d33dca82a3da09a1fc38a8", "extra_info": null, "index": 76, "child_indices": [], "ref_doc_id": "c5566ada-ce59-486b-822b-9b29bdb7c285", "node_info": null, "image": null}, "77": {"text": "a common API through which you can use to access various functions and properties that will help you develop your strategy and bot. The markdown version is here: https://github.com/Lux-AI-Challenge/Lux-Design-S2/blob/main/kits/README.md, which also describes the observation and action structure/spaces.\n\nSubmitting to Kaggle\nSubmissions need to be a .tar.gz bundle with main.py at the top level directory (not nested). To create a submission, create the .tar.gz with tar -czvf submission.tar.gz *. Upload this under the My Submissions tab and you should be good to go! Your submission will start with a scheduled game vs itself to ensure everything is working before being entered into the matchmaking pool against the rest of the leaderboard.\n\nFAQ\nAs questions come up, this will be populated with frequently asked questions regarding the Python kit.", "doc_id": "f7a31b00-ec3e-4571-8846-5638ff37ae94", "embedding": null, "doc_hash": "f805950b49ac7abef2a1c26c50166e7b8303d0b96c8cbf15d66d1265fbfe03b5", "extra_info": null, "index": 77, "child_indices": [], "ref_doc_id": "c5566ada-ce59-486b-822b-9b29bdb7c285", "node_info": null, "image": null}, "78": {"text": "sample_agent class\n\nclass Agent():\n    def __init__(self, player: str, env_cfg: EnvConfig) -> None:\n        self.player = player\n        self.opp_player = \"player_1\" if self.player == \"player_0\" else \"player_0\"\n        np.random.seed(0)\n        self.env_cfg: EnvConfig = env_cfg\n\n    def early_setup(self, step: int, obs, remainingOverageTime: int = 60):\n        if step == 0:\n            # bid 0 to not waste resources bidding and declare as the default faction\n            return dict(faction=\"AlphaStrike\", bid=0)\n        else:\n            game_state = obs_to_game_state(step, self.env_cfg, obs)\n            # factory placement period\n\n            # how much water and metal you have in your starting pool to give to new factories\n            water_left = game_state.teams[self.player].water\n            metal_left =", "doc_id": "19fc5aaa-d0d9-41ee-bb54-3653b955cc10", "embedding": null, "doc_hash": "f1e0a44253d880436dbc2fa13a80605e39878f524e744d67449b8c5c16b5b7af", "extra_info": null, "index": 78, "child_indices": [], "ref_doc_id": "8fd345b2-fa5f-4d94-a467-e78cddc3316c", "node_info": null, "image": null}, "79": {"text": "           metal_left = game_state.teams[self.player].metal\n\n            # how many factories you have left to place\n            factories_to_place = game_state.teams[self.player].factories_to_place\n            # whether it is your turn to place a factory\n            my_turn_to_place = my_turn_to_place_factory(game_state.teams[self.player].place_first, step)\n            if factories_to_place > 0 and my_turn_to_place:\n                # we will spawn our factory in a random location with 150 metal and water if it is our turn to place\n                potential_spawns = np.array(list(zip(*np.where(obs[\"board\"][\"valid_spawns_mask\"] == 1))))\n                spawn_loc = potential_spawns[np.random.randint(0, len(potential_spawns))]\n                return dict(spawn=spawn_loc, metal=150, water=150)\n      ", "doc_id": "64b07bd6-6276-49bb-930a-4d136d643c4a", "embedding": null, "doc_hash": "81f8c3ff6b30c2216baee35555ac0e2a425bcbd1290b8cf20b0ab61b875ca78a", "extra_info": null, "index": 79, "child_indices": [], "ref_doc_id": "8fd345b2-fa5f-4d94-a467-e78cddc3316c", "node_info": null, "image": null}, "80": {"text": "metal=150, water=150)\n            return dict()\n\n    def act(self, step: int, obs, remainingOverageTime: int = 60):\n        actions = dict()\n        \n        \"\"\"\n        optionally do forward simulation to simulate positions of units, lichen, etc. in the future\n        from lux.forward_sim import forward_sim\n        forward_obs = forward_sim(obs, self.env_cfg, n=2)\n        forward_game_states = [obs_to_game_state(step + i, self.env_cfg, f_obs) for i, f_obs in enumerate(forward_obs)]\n        \"\"\"\n\n        game_state = obs_to_game_state(step, self.env_cfg, obs)\n        factories = game_state.factories[self.player]\n        game_state.teams[self.player].place_first\n        factory_tiles, factory_units = [], []\n        for unit_id, factory in factories.items():\n            if factory.power >=", "doc_id": "eb0e3ca2-850f-4d02-adb3-b31112742110", "embedding": null, "doc_hash": "dd96860338f536c665ebbb6e37c09e218035352979add2d97300c344056c5172", "extra_info": null, "index": 80, "child_indices": [], "ref_doc_id": "8fd345b2-fa5f-4d94-a467-e78cddc3316c", "node_info": null, "image": null}, "81": {"text": "           if factory.power >= self.env_cfg.ROBOTS[\"HEAVY\"].POWER_COST and \\\n            factory.cargo.metal >= self.env_cfg.ROBOTS[\"HEAVY\"].METAL_COST:\n                actions[unit_id] = factory.build_heavy()\n            if factory.water_cost(game_state) <= factory.cargo.water / 5 - 200:\n                actions[unit_id] = factory.water()\n            factory_tiles += [factory.pos]\n            factory_units += [factory]\n        factory_tiles = np.array(factory_tiles)\n\n        units = game_state.units[self.player]\n        ice_map = game_state.board.ice\n        ice_tile_locations = np.argwhere(ice_map == 1)\n        for unit_id, unit in units.items():\n\n            # track the closest factory\n       ", "doc_id": "59bbfbc8-7606-4276-9b15-dc50fe1ce4cf", "embedding": null, "doc_hash": "6bb103f613b56c8bbf7432d800164561aa1903046c035045e9eb81f10f3da4ad", "extra_info": null, "index": 81, "child_indices": [], "ref_doc_id": "8fd345b2-fa5f-4d94-a467-e78cddc3316c", "node_info": null, "image": null}, "82": {"text": "    # track the closest factory\n            closest_factory = None\n            adjacent_to_factory = False\n            if len(factory_tiles) > 0:\n                factory_distances = np.mean((factory_tiles - unit.pos) ** 2, 1)\n                closest_factory_tile = factory_tiles[np.argmin(factory_distances)]\n                closest_factory = factory_units[np.argmin(factory_distances)]\n                adjacent_to_factory = np.mean((closest_factory_tile - unit.pos) ** 2) == 0\n\n                # previous ice mining code\n                if unit.cargo.ice < 40:\n                    ice_tile_distances = np.mean((ice_tile_locations - unit.pos) ** 2, 1)\n                  ", "doc_id": "790ca9e3-44b1-4280-a7e7-6a94aeec00f4", "embedding": null, "doc_hash": "5220bb87e81e93dccaffb72c8d71e729cbfb03d9c0ac77f506f5608ba6acac0e", "extra_info": null, "index": 82, "child_indices": [], "ref_doc_id": "8fd345b2-fa5f-4d94-a467-e78cddc3316c", "node_info": null, "image": null}, "83": {"text": "                   closest_ice_tile = ice_tile_locations[np.argmin(ice_tile_distances)]\n                    if np.all(closest_ice_tile == unit.pos):\n                        if unit.power >= unit.dig_cost(game_state) + unit.action_queue_cost(game_state):\n                            actions[unit_id] = [unit.dig(repeat=0, n=1)]\n                    else:\n                        direction = direction_to(unit.pos, closest_ice_tile)\n                        move_cost = unit.move_cost(game_state, direction)\n                        if move_cost is not None and unit.power >= move_cost + unit.action_queue_cost(game_state):\n                 ", "doc_id": "b2c7374e-0a4d-486d-bb04-54452f76e1c4", "embedding": null, "doc_hash": "6da28340b1e37c0f9040a4920ee55eaedbd5793c52cbe394e2f8946dc6b5db1a", "extra_info": null, "index": 83, "child_indices": [], "ref_doc_id": "8fd345b2-fa5f-4d94-a467-e78cddc3316c", "node_info": null, "image": null}, "84": {"text": "                           actions[unit_id] = [unit.move(direction, repeat=0, n=1)]\n                # else if we have enough ice, we go back to the factory and dump it.\n                elif unit.cargo.ice >= 40:\n                    direction = direction_to(unit.pos, closest_factory_tile)\n                    if adjacent_to_factory:\n                        if unit.power >= unit.action_queue_cost(game_state):\n                            actions[unit_id] = [unit.transfer(direction, 0, unit.cargo.ice, repeat=0)]\n                    else:\n                        move_cost = unit.move_cost(game_state, direction)\n                   ", "doc_id": "e565b56b-efd1-4ea0-9468-3584e1033167", "embedding": null, "doc_hash": "39b885c02c73243efd463c5100170aeb43a5564d6067fbbdc035b13cb990cb23", "extra_info": null, "index": 84, "child_indices": [], "ref_doc_id": "8fd345b2-fa5f-4d94-a467-e78cddc3316c", "node_info": null, "image": null}, "85": {"text": "                       if move_cost is not None and unit.power >= move_cost + unit.action_queue_cost(game_state):\n                            actions[unit_id] = [unit.move(direction, repeat=0, n=1)]\n        return actions", "doc_id": "7868b348-d118-4b54-bbb2-d677c3b36dc0", "embedding": null, "doc_hash": "03eb3e1c29b32ea318efd763f5e447de3b0610cdcdaf58f15b427ed25a2a99d2", "extra_info": null, "index": 85, "child_indices": [], "ref_doc_id": "8fd345b2-fa5f-4d94-a467-e78cddc3316c", "node_info": null, "image": null}, "86": {"text": "The Lux AI Challenge Season 2 provides kits for participants to develop their agents. These kits include tools for Kit Structure, Forward Simulation, Environment Actions and Observations, and the general Kit API. Starter kits contain a README document and example code to help participants understand how to read observations and submit actions. The competition server records debugging logs, and replays can be viewed on the online visualizer. The agent's logic is defined in the early_setup and act functions, which handle the early phase and the actual game phase, respectively. Forward simulation is available in the kits, and the environment actions and observations are detailed in the agent.py file. The Kit API provides an interactable interface for accessing the current state of the environment.", "doc_id": "11ae2f28-4cf3-418e-912f-d70e1dc1c7a7", "embedding": null, "doc_hash": "1ebd2a72c402840452e7f2ccdbd76389e9722b0fc0513777be39a6706c2978fb", "extra_info": null, "index": 86, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], "ref_doc_id": null, "node_info": null, "image": null}, "87": {"text": "This tutorial assumes basic knowledge of Python and programming and provides an introduction to the Lux AI Season 2 game. It covers the basic setup, including verifying Python version, installing the luxai_s2 package, and importing necessary modules. The tutorial also demonstrates how to create an environment, interact with it, and visualize it using rgb_array mode or the CLI tool.\n\nThe tutorial then introduces the Agent class, which initializes the player, opponent player, and environment configuration. The Agent class has two methods: early_setup and act. The early_setup method is used for early game setup, while the act method is called for the agent to decide its next action. Currently, the agent does not have any specific strategy or actions, but the framework can be extended to implement decision-making based on the game state.", "doc_id": "d717636d-903c-4664-ae81-140f8743a9b0", "embedding": null, "doc_hash": "3cae066c7046eda4fb589e105eda63ec0dbb65dc8e2eccfcdbb1a13aaae9c2a7", "extra_info": null, "index": 87, "child_indices": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "ref_doc_id": null, "node_info": null, "image": null}, "88": {"text": "This code defines a simple function to initialize an agent and interact with the environment, generating a video replay. The function, called \"interact,\" simulates the interaction between the agent and the environment for a specified number of steps. It saves the image frames of each step and uses the \"animate\" function to create and display a video. The environment has two phases, and the agents need to program two different logics to play. The web visualizer can be used to visually see all numbers and details about units, factories, etc.", "doc_id": "1b4be471-8dfa-4780-86b7-085f747f6960", "embedding": null, "doc_hash": "07f13d6b4cdb2620f686edaf2008edd21b6ee74c9cecdd7a6f78cefd5b434987", "extra_info": null, "index": 88, "child_indices": [20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "ref_doc_id": null, "node_info": null, "image": null}, "89": {"text": "In this game, each team can place N factories, and the observation contains all possible spawn locations for the team. The early_setup function is redefined to determine the agent's actions during the initial stage of the game, such as setting the team name and bid amount and placing factories. The agent bids 0 to save resources and sets the faction as \"AlphaStrike.\" If there are factories left to place and it's the agent's turn, a factory is placed at a random location with 150 metal and water. The goal of the game is to grow more lichen than the opponent by the end of the 1000 step episode. Factories consume water to grow lichen and passively consume 1 water per turn. Robots/units must mine ice from ice tiles and deliver it to a factory to obtain water. The obs_to_game_state function is used to convert observations to interactable python objects. The agent's actions during the regular phase of the game are determined by redefining the act method, which includes building robots using factories if there is enough metal and power.", "doc_id": "c35359b0-4d37-447d-965d-cfdc343a56eb", "embedding": null, "doc_hash": "02901ce581e26500f7aab17e84b84a269bb81f81829e0e1a60d15ad84c377b84", "extra_info": null, "index": 89, "child_indices": [32, 33, 34, 35, 36, 37, 38, 39, 30, 31], "ref_doc_id": null, "node_info": null, "image": null}, "90": {"text": "\u3053\u306e\u30b3\u30fc\u30c9\u306f\u3001\u30b2\u30fc\u30e0\u306e\u72b6\u614b\u3092\u751f\u6210\u3057\u3001\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u304c\u6240\u5c5e\u3059\u308b\u30c1\u30fc\u30e0\u306e\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u6761\u4ef6\u3092\u6e80\u305f\u3059\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u3067\u91cd\u3044\u30ed\u30dc\u30c3\u30c8\u3092\u751f\u6210\u3059\u308b\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u304c\u6240\u5c5e\u3059\u308b\u30c1\u30fc\u30e0\u306e\u30e6\u30cb\u30c3\u30c8\u304c\u6700\u3082\u8fd1\u3044\u6c37\u30bf\u30a4\u30eb\u3092\u63a2\u9271\u3059\u308b\u3088\u3046\u306b\u884c\u52d5\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306e\u6226\u7565\u304c\u62e1\u5f35\u3055\u308c\u3001\u30b2\u30fc\u30e0\u30d7\u30ec\u30a4\u4e2d\u306e\u884c\u52d5\u304c\u6700\u9069\u5316\u3055\u308c\u307e\u3059\u3002", "doc_id": "a1b40002-17b3-4ffe-acff-574d0d0590c0", "embedding": null, "doc_hash": "dedbc73cfe142847dbd6e7cddcf20ec03d81331420b7b21d122f9340e57fd38a", "extra_info": null, "index": 90, "child_indices": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "ref_doc_id": null, "node_info": null, "image": null}, "91": {"text": "The code updates the act method to make the agent's units mine ice and return it to the nearest factory after mining. It maintains the factory logic implemented in the previous act method, allowing heavy robots to be produced at factories that meet the conditions. The agent retrieves the positions of units and factories belonging to its team. For each unit, it identifies the closest factory, checks if the unit is adjacent to the factory, and follows the previous logic to mine ice tiles if the unit's ice amount is less than 40. If the unit's ice amount is 40 or more, it transfers ice to the factory if adjacent or moves towards the nearest factory otherwise. This update allows the agent to more effectively gather resources and optimize its strategy.", "doc_id": "8bc54658-e085-4d48-9aff-01faaccd3452", "embedding": null, "doc_hash": "bf16508cc3d604b48040b5b5d95e0053761c8c872f698490601a7a315119c7ec", "extra_info": null, "index": 91, "child_indices": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "ref_doc_id": null, "node_info": null, "image": null}, "92": {"text": "The code provided is for a Lux AI agent that performs various actions based on the game state. In the early_setup function, the agent declares its faction and places factories in random locations with 150 metal and water. In the act function, the agent builds heavy robots, mines ice, and transfers ice to the closest factory. To create a submission, the code is compressed into a .tar.gz file, which can be uploaded to the Kaggle competition. The CLI tool allows testing the agent without using the Python API and generates a replay.html file to watch the game.", "doc_id": "f8699529-49ae-4186-89c0-33023730e8a6", "embedding": null, "doc_hash": "402066656e4da6e7b9cc4a794a5f1dd71d1e0f703cc89d83118abd089331318b", "extra_info": null, "index": 92, "child_indices": [64, 65, 66, 67, 68, 69, 60, 61, 62, 63], "ref_doc_id": null, "node_info": null, "image": null}, "93": {"text": "The CLI tool allows easy execution of episodes between any two agents (regardless of whether they are Python-based) and provides a flexible tournament execution tool for evaluating multiple agents together. The documentation for this tool can be found at https://github.com/Lux-AI-Challenge/Lux-Design-S2/tree/main/luxai_runner/README.md. The provided code demonstrates how to run an agent for the Lux AI competition using the Agent class defined in agent.py. This code is necessary for running in the Kaggle environment. To execute the code, create an agent.py file, paste the provided Agent class code, and paste the provided code in a new file called main.py. Ensure that main.py is in the same directory as agent.py. Run main.py in the Kaggle or local environment to check if the agent is working. For testing in a local environment, it is recommended to set up the environment using the Lux AI official starter kit and run simulations. For more details, refer to the official GitHub repository.", "doc_id": "51bdcacf-3c6d-4982-8182-7c66ae0668c3", "embedding": null, "doc_hash": "f88fea64e5bf270b46d96c74944f3340949c5a1695d046f98f8010085037132e", "extra_info": null, "index": 93, "child_indices": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79], "ref_doc_id": null, "node_info": null, "image": null}, "94": {"text": "The code defines an agent's actions in a game environment. The agent manages factories and units, with the goal of mining ice and returning it to the factories. Factories can build heavy robots if they have enough power and metal. Units mine ice if they have less than 40 ice in their cargo and return to the factory when their cargo is full. The agent calculates the closest factory and ice tile for each unit and moves them accordingly.", "doc_id": "1c840dca-041b-460c-8cc9-ac60ea48d4fe", "embedding": null, "doc_hash": "800ba5663198aac8821d765c711c8a1f6afbb19742dc4f7bb1b8e27dddb24444", "extra_info": null, "index": 94, "child_indices": [80, 81, 82, 83, 84, 85], "ref_doc_id": null, "node_info": null, "image": null}}, "root_nodes": {"86": {"text": "The Lux AI Challenge Season 2 provides kits for participants to develop their agents. These kits include tools for Kit Structure, Forward Simulation, Environment Actions and Observations, and the general Kit API. Starter kits contain a README document and example code to help participants understand how to read observations and submit actions. The competition server records debugging logs, and replays can be viewed on the online visualizer. The agent's logic is defined in the early_setup and act functions, which handle the early phase and the actual game phase, respectively. Forward simulation is available in the kits, and the environment actions and observations are detailed in the agent.py file. The Kit API provides an interactable interface for accessing the current state of the environment.", "doc_id": "11ae2f28-4cf3-418e-912f-d70e1dc1c7a7", "embedding": null, "doc_hash": "1ebd2a72c402840452e7f2ccdbd76389e9722b0fc0513777be39a6706c2978fb", "extra_info": null, "index": 86, "child_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], "ref_doc_id": null, "node_info": null, "image": null}, "87": {"text": "This tutorial assumes basic knowledge of Python and programming and provides an introduction to the Lux AI Season 2 game. It covers the basic setup, including verifying Python version, installing the luxai_s2 package, and importing necessary modules. The tutorial also demonstrates how to create an environment, interact with it, and visualize it using rgb_array mode or the CLI tool.\n\nThe tutorial then introduces the Agent class, which initializes the player, opponent player, and environment configuration. The Agent class has two methods: early_setup and act. The early_setup method is used for early game setup, while the act method is called for the agent to decide its next action. Currently, the agent does not have any specific strategy or actions, but the framework can be extended to implement decision-making based on the game state.", "doc_id": "d717636d-903c-4664-ae81-140f8743a9b0", "embedding": null, "doc_hash": "3cae066c7046eda4fb589e105eda63ec0dbb65dc8e2eccfcdbb1a13aaae9c2a7", "extra_info": null, "index": 87, "child_indices": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "ref_doc_id": null, "node_info": null, "image": null}, "88": {"text": "This code defines a simple function to initialize an agent and interact with the environment, generating a video replay. The function, called \"interact,\" simulates the interaction between the agent and the environment for a specified number of steps. It saves the image frames of each step and uses the \"animate\" function to create and display a video. The environment has two phases, and the agents need to program two different logics to play. The web visualizer can be used to visually see all numbers and details about units, factories, etc.", "doc_id": "1b4be471-8dfa-4780-86b7-085f747f6960", "embedding": null, "doc_hash": "07f13d6b4cdb2620f686edaf2008edd21b6ee74c9cecdd7a6f78cefd5b434987", "extra_info": null, "index": 88, "child_indices": [20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "ref_doc_id": null, "node_info": null, "image": null}, "89": {"text": "In this game, each team can place N factories, and the observation contains all possible spawn locations for the team. The early_setup function is redefined to determine the agent's actions during the initial stage of the game, such as setting the team name and bid amount and placing factories. The agent bids 0 to save resources and sets the faction as \"AlphaStrike.\" If there are factories left to place and it's the agent's turn, a factory is placed at a random location with 150 metal and water. The goal of the game is to grow more lichen than the opponent by the end of the 1000 step episode. Factories consume water to grow lichen and passively consume 1 water per turn. Robots/units must mine ice from ice tiles and deliver it to a factory to obtain water. The obs_to_game_state function is used to convert observations to interactable python objects. The agent's actions during the regular phase of the game are determined by redefining the act method, which includes building robots using factories if there is enough metal and power.", "doc_id": "c35359b0-4d37-447d-965d-cfdc343a56eb", "embedding": null, "doc_hash": "02901ce581e26500f7aab17e84b84a269bb81f81829e0e1a60d15ad84c377b84", "extra_info": null, "index": 89, "child_indices": [32, 33, 34, 35, 36, 37, 38, 39, 30, 31], "ref_doc_id": null, "node_info": null, "image": null}, "90": {"text": "\u3053\u306e\u30b3\u30fc\u30c9\u306f\u3001\u30b2\u30fc\u30e0\u306e\u72b6\u614b\u3092\u751f\u6210\u3057\u3001\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u304c\u6240\u5c5e\u3059\u308b\u30c1\u30fc\u30e0\u306e\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u6761\u4ef6\u3092\u6e80\u305f\u3059\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u3067\u91cd\u3044\u30ed\u30dc\u30c3\u30c8\u3092\u751f\u6210\u3059\u308b\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u304c\u6240\u5c5e\u3059\u308b\u30c1\u30fc\u30e0\u306e\u30e6\u30cb\u30c3\u30c8\u304c\u6700\u3082\u8fd1\u3044\u6c37\u30bf\u30a4\u30eb\u3092\u63a2\u9271\u3059\u308b\u3088\u3046\u306b\u884c\u52d5\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306e\u6226\u7565\u304c\u62e1\u5f35\u3055\u308c\u3001\u30b2\u30fc\u30e0\u30d7\u30ec\u30a4\u4e2d\u306e\u884c\u52d5\u304c\u6700\u9069\u5316\u3055\u308c\u307e\u3059\u3002", "doc_id": "a1b40002-17b3-4ffe-acff-574d0d0590c0", "embedding": null, "doc_hash": "dedbc73cfe142847dbd6e7cddcf20ec03d81331420b7b21d122f9340e57fd38a", "extra_info": null, "index": 90, "child_indices": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49], "ref_doc_id": null, "node_info": null, "image": null}, "91": {"text": "The code updates the act method to make the agent's units mine ice and return it to the nearest factory after mining. It maintains the factory logic implemented in the previous act method, allowing heavy robots to be produced at factories that meet the conditions. The agent retrieves the positions of units and factories belonging to its team. For each unit, it identifies the closest factory, checks if the unit is adjacent to the factory, and follows the previous logic to mine ice tiles if the unit's ice amount is less than 40. If the unit's ice amount is 40 or more, it transfers ice to the factory if adjacent or moves towards the nearest factory otherwise. This update allows the agent to more effectively gather resources and optimize its strategy.", "doc_id": "8bc54658-e085-4d48-9aff-01faaccd3452", "embedding": null, "doc_hash": "bf16508cc3d604b48040b5b5d95e0053761c8c872f698490601a7a315119c7ec", "extra_info": null, "index": 91, "child_indices": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "ref_doc_id": null, "node_info": null, "image": null}, "92": {"text": "The code provided is for a Lux AI agent that performs various actions based on the game state. In the early_setup function, the agent declares its faction and places factories in random locations with 150 metal and water. In the act function, the agent builds heavy robots, mines ice, and transfers ice to the closest factory. To create a submission, the code is compressed into a .tar.gz file, which can be uploaded to the Kaggle competition. The CLI tool allows testing the agent without using the Python API and generates a replay.html file to watch the game.", "doc_id": "f8699529-49ae-4186-89c0-33023730e8a6", "embedding": null, "doc_hash": "402066656e4da6e7b9cc4a794a5f1dd71d1e0f703cc89d83118abd089331318b", "extra_info": null, "index": 92, "child_indices": [64, 65, 66, 67, 68, 69, 60, 61, 62, 63], "ref_doc_id": null, "node_info": null, "image": null}, "93": {"text": "The CLI tool allows easy execution of episodes between any two agents (regardless of whether they are Python-based) and provides a flexible tournament execution tool for evaluating multiple agents together. The documentation for this tool can be found at https://github.com/Lux-AI-Challenge/Lux-Design-S2/tree/main/luxai_runner/README.md. The provided code demonstrates how to run an agent for the Lux AI competition using the Agent class defined in agent.py. This code is necessary for running in the Kaggle environment. To execute the code, create an agent.py file, paste the provided Agent class code, and paste the provided code in a new file called main.py. Ensure that main.py is in the same directory as agent.py. Run main.py in the Kaggle or local environment to check if the agent is working. For testing in a local environment, it is recommended to set up the environment using the Lux AI official starter kit and run simulations. For more details, refer to the official GitHub repository.", "doc_id": "51bdcacf-3c6d-4982-8182-7c66ae0668c3", "embedding": null, "doc_hash": "f88fea64e5bf270b46d96c74944f3340949c5a1695d046f98f8010085037132e", "extra_info": null, "index": 93, "child_indices": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79], "ref_doc_id": null, "node_info": null, "image": null}, "94": {"text": "The code defines an agent's actions in a game environment. The agent manages factories and units, with the goal of mining ice and returning it to the factories. Factories can build heavy robots if they have enough power and metal. Units mine ice if they have less than 40 ice in their cargo and return to the factory when their cargo is full. The agent calculates the closest factory and ice tile for each unit and moves them accordingly.", "doc_id": "1c840dca-041b-460c-8cc9-ac60ea48d4fe", "embedding": null, "doc_hash": "800ba5663198aac8821d765c711c8a1f6afbb19742dc4f7bb1b8e27dddb24444", "extra_info": null, "index": 94, "child_indices": [80, 81, 82, 83, 84, 85], "ref_doc_id": null, "node_info": null, "image": null}}, "__type__": "tree"}}, "ref_doc_info": {"18a39570-cfda-4acd-8ba3-1c5877dcfed0": {"doc_hash": "2c68a40ae541639ba79764c74a74f170b228259749fde7cbd552e9b1e6469d92"}, "98820b34-8aa4-4bcc-8e51-a9cedc877da1": {"doc_hash": "00226d92ba3bf3f51b552dc75430d6354e9d171da17c083f8e36f82ea59e15be"}, "26e30db1-5df8-42fd-b084-c35ec4d0c709": {"doc_hash": "ab1658d86009da42d762eabf9a1f53a7ae591e9393525f80fba786c6744a2658"}, "c5566ada-ce59-486b-822b-9b29bdb7c285": {"doc_hash": "70f99bdc7a5af6c63a54b40c6dc2c286bf9d8bad41aead67d65c27fa566dbd66"}, "8fd345b2-fa5f-4d94-a467-e78cddc3316c": {"doc_hash": "9a267bbab17f37cdd2b2a983b0abb455756b855a65c8235418ee092151500258"}, "5b3f5285-fb36-4749-be3a-90cd3156eb6e": {"doc_hash": "08a14830cef184731c6b6a0bdd67fa351d923556941aa99027b276bd839a07a4"}}}}